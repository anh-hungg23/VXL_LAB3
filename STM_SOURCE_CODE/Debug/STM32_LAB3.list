
STM32_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de0  08002de0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002de0  08002de0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de0  08002de0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de0  08002de0  00012de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002de4  08002de4  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000018  08002e00  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08002e00  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa3d  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f91  00000000  00000000  0002aa7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002ca10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002d4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172a1  00000000  00000000  0002dea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c794  00000000  00000000  00045149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082982  00000000  00000000  000518dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d425f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a40  00000000  00000000  000d42b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002da4 	.word	0x08002da4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002da4 	.word	0x08002da4

0800014c <initButton>:
Button button1;
Button button2;
Button button3;


void initButton (Button * btn, GPIO_TypeDef * port, uint16_t pin) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4613      	mov	r3, r2
 8000158:	80fb      	strh	r3, [r7, #6]
	btn -> PORT = port;
 800015a:	68fb      	ldr	r3, [r7, #12]
 800015c:	68ba      	ldr	r2, [r7, #8]
 800015e:	60da      	str	r2, [r3, #12]
	btn -> PIN  = pin;
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	88fa      	ldrh	r2, [r7, #6]
 8000164:	821a      	strh	r2, [r3, #16]
	btn -> keyReg0 = btn -> keyReg1 = btn -> keyReg2 = NORMAL_STATE;
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	2201      	movs	r2, #1
 800016a:	709a      	strb	r2, [r3, #2]
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	789a      	ldrb	r2, [r3, #2]
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	705a      	strb	r2, [r3, #1]
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	785a      	ldrb	r2, [r3, #1]
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	701a      	strb	r2, [r3, #0]
	btn -> keyReg3 = NORMAL_STATE;
 800017c:	68fb      	ldr	r3, [r7, #12]
 800017e:	2201      	movs	r2, #1
 8000180:	70da      	strb	r2, [r3, #3]
	btn -> timerForPress = 200;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	22c8      	movs	r2, #200	; 0xc8
 8000186:	609a      	str	r2, [r3, #8]
	btn -> pressFlag = 0;
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	2200      	movs	r2, #0
 800018c:	711a      	strb	r2, [r3, #4]
}
 800018e:	bf00      	nop
 8000190:	3714      	adds	r7, #20
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <getKeyInput>:

void getKeyInput(Button * btn) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
	btn -> keyReg0 = btn -> keyReg1;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	785a      	ldrb	r2, [r3, #1]
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	701a      	strb	r2, [r3, #0]
	btn -> keyReg1 = btn -> keyReg2;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	789a      	ldrb	r2, [r3, #2]
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	705a      	strb	r2, [r3, #1]
	btn -> keyReg2 = HAL_GPIO_ReadPin(btn -> PORT, btn -> PIN);
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	68da      	ldr	r2, [r3, #12]
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	8a1b      	ldrh	r3, [r3, #16]
 80001b8:	4619      	mov	r1, r3
 80001ba:	4610      	mov	r0, r2
 80001bc:	f001 fdc6 	bl	8001d4c <HAL_GPIO_ReadPin>
 80001c0:	4603      	mov	r3, r0
 80001c2:	461a      	mov	r2, r3
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	709a      	strb	r2, [r3, #2]
	if ((btn -> keyReg0 == btn -> keyReg1) && (btn -> keyReg1 == btn -> keyReg2) ) {
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	781a      	ldrb	r2, [r3, #0]
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	785b      	ldrb	r3, [r3, #1]
 80001d0:	429a      	cmp	r2, r3
 80001d2:	d12d      	bne.n	8000230 <getKeyInput+0x98>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	785a      	ldrb	r2, [r3, #1]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	789b      	ldrb	r3, [r3, #2]
 80001dc:	429a      	cmp	r2, r3
 80001de:	d127      	bne.n	8000230 <getKeyInput+0x98>
		if (btn -> keyReg3 != btn -> keyReg2) {
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	78da      	ldrb	r2, [r3, #3]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	789b      	ldrb	r3, [r3, #2]
 80001e8:	429a      	cmp	r2, r3
 80001ea:	d00e      	beq.n	800020a <getKeyInput+0x72>
			btn -> keyReg3 = btn -> keyReg2;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	789a      	ldrb	r2, [r3, #2]
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	70da      	strb	r2, [r3, #3]
			if(btn -> keyReg2 == PRESSED_STATE) {
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	789b      	ldrb	r3, [r3, #2]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d119      	bne.n	8000230 <getKeyInput+0x98>
				//TODO

				btn -> pressFlag = 1;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2201      	movs	r2, #1
 8000200:	711a      	strb	r2, [r3, #4]
				btn -> timerForPress = 200;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	22c8      	movs	r2, #200	; 0xc8
 8000206:	609a      	str	r2, [r3, #8]
					btn -> timerForPress = 200;
				}
			}
		}
	}
}
 8000208:	e012      	b.n	8000230 <getKeyInput+0x98>
			btn -> timerForPress --;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	1e5a      	subs	r2, r3, #1
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	609a      	str	r2, [r3, #8]
			if (btn -> timerForPress == 0) {
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	689b      	ldr	r3, [r3, #8]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d109      	bne.n	8000230 <getKeyInput+0x98>
				if(btn -> keyReg2 == PRESSED_STATE) {
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	789b      	ldrb	r3, [r3, #2]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d105      	bne.n	8000230 <getKeyInput+0x98>
					btn -> pressFlag = 1;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2201      	movs	r2, #1
 8000228:	711a      	strb	r2, [r3, #4]
					btn -> timerForPress = 200;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	22c8      	movs	r2, #200	; 0xc8
 800022e:	609a      	str	r2, [r3, #8]
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <initAllButtons>:

void initAllButtons() {
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	initButton(&button1, but_1_GPIO_Port, but_1_Pin);
 800023c:	2280      	movs	r2, #128	; 0x80
 800023e:	4909      	ldr	r1, [pc, #36]	; (8000264 <initAllButtons+0x2c>)
 8000240:	4809      	ldr	r0, [pc, #36]	; (8000268 <initAllButtons+0x30>)
 8000242:	f7ff ff83 	bl	800014c <initButton>
	initButton(&button2, but_2_GPIO_Port, but_2_Pin);
 8000246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800024a:	4906      	ldr	r1, [pc, #24]	; (8000264 <initAllButtons+0x2c>)
 800024c:	4807      	ldr	r0, [pc, #28]	; (800026c <initAllButtons+0x34>)
 800024e:	f7ff ff7d 	bl	800014c <initButton>
	initButton(&button3, but_3_GPIO_Port, but_3_Pin);
 8000252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000256:	4903      	ldr	r1, [pc, #12]	; (8000264 <initAllButtons+0x2c>)
 8000258:	4805      	ldr	r0, [pc, #20]	; (8000270 <initAllButtons+0x38>)
 800025a:	f7ff ff77 	bl	800014c <initButton>
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40010c00 	.word	0x40010c00
 8000268:	20000090 	.word	0x20000090
 800026c:	20000068 	.word	0x20000068
 8000270:	2000007c 	.word	0x2000007c

08000274 <isButtonPressed>:

uint8_t isButtonPressed(Button* btn) {
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	if (btn -> pressFlag == 1) {
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	791b      	ldrb	r3, [r3, #4]
 8000280:	2b01      	cmp	r3, #1
 8000282:	d104      	bne.n	800028e <isButtonPressed+0x1a>
		btn -> pressFlag = 0;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2200      	movs	r2, #0
 8000288:	711a      	strb	r2, [r3, #4]
		return 1;
 800028a:	2301      	movs	r3, #1
 800028c:	e000      	b.n	8000290 <isButtonPressed+0x1c>
	}
	return 0;
 800028e:	2300      	movs	r3, #0
}
 8000290:	4618      	mov	r0, r3
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
	...

0800029c <fsm_auto_run_main>:
int timeRed   = 5000;
int timeYel   = 2000;
int timeGreen = 3000;


void fsm_auto_run_main() {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	switch(main_status) {
 80002a0:	4b45      	ldr	r3, [pc, #276]	; (80003b8 <fsm_auto_run_main+0x11c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	3b01      	subs	r3, #1
 80002a6:	2b03      	cmp	r3, #3
 80002a8:	d87a      	bhi.n	80003a0 <fsm_auto_run_main+0x104>
 80002aa:	a201      	add	r2, pc, #4	; (adr r2, 80002b0 <fsm_auto_run_main+0x14>)
 80002ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b0:	080002c1 	.word	0x080002c1
 80002b4:	080002f9 	.word	0x080002f9
 80002b8:	08000331 	.word	0x08000331
 80002bc:	08000369 	.word	0x08000369
	case MAIN_INIT:
		turnOffMainLeds();
 80002c0:	f000 ffb4 	bl	800122c <turnOffMainLeds>
		if(isTimerExpired(&timer1)) {
 80002c4:	483d      	ldr	r0, [pc, #244]	; (80003bc <fsm_auto_run_main+0x120>)
 80002c6:	f001 f9ec 	bl	80016a2 <isTimerExpired>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d069      	beq.n	80003a4 <fsm_auto_run_main+0x108>
			main_status = MAIN_RED;
 80002d0:	4b39      	ldr	r3, [pc, #228]	; (80003b8 <fsm_auto_run_main+0x11c>)
 80002d2:	2202      	movs	r2, #2
 80002d4:	601a      	str	r2, [r3, #0]
			mainTimeRemain = timeRed/1000;
 80002d6:	4b3a      	ldr	r3, [pc, #232]	; (80003c0 <fsm_auto_run_main+0x124>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a3a      	ldr	r2, [pc, #232]	; (80003c4 <fsm_auto_run_main+0x128>)
 80002dc:	fb82 1203 	smull	r1, r2, r2, r3
 80002e0:	1192      	asrs	r2, r2, #6
 80002e2:	17db      	asrs	r3, r3, #31
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	4a38      	ldr	r2, [pc, #224]	; (80003c8 <fsm_auto_run_main+0x12c>)
 80002e8:	6013      	str	r3, [r2, #0]
			setTimer(&timer1,timeRed);
 80002ea:	4b35      	ldr	r3, [pc, #212]	; (80003c0 <fsm_auto_run_main+0x124>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4619      	mov	r1, r3
 80002f0:	4832      	ldr	r0, [pc, #200]	; (80003bc <fsm_auto_run_main+0x120>)
 80002f2:	f001 f9a7 	bl	8001644 <setTimer>
		}

		break;
 80002f6:	e055      	b.n	80003a4 <fsm_auto_run_main+0x108>

	case MAIN_RED:
		redOnMain();
 80002f8:	f001 f834 	bl	8001364 <redOnMain>
		if(isTimerExpired(&timer1)) {
 80002fc:	482f      	ldr	r0, [pc, #188]	; (80003bc <fsm_auto_run_main+0x120>)
 80002fe:	f001 f9d0 	bl	80016a2 <isTimerExpired>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d04f      	beq.n	80003a8 <fsm_auto_run_main+0x10c>
			main_status = MAIN_GREEN;
 8000308:	4b2b      	ldr	r3, [pc, #172]	; (80003b8 <fsm_auto_run_main+0x11c>)
 800030a:	2204      	movs	r2, #4
 800030c:	601a      	str	r2, [r3, #0]
			mainTimeRemain = timeGreen/1000;
 800030e:	4b2f      	ldr	r3, [pc, #188]	; (80003cc <fsm_auto_run_main+0x130>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a2c      	ldr	r2, [pc, #176]	; (80003c4 <fsm_auto_run_main+0x128>)
 8000314:	fb82 1203 	smull	r1, r2, r2, r3
 8000318:	1192      	asrs	r2, r2, #6
 800031a:	17db      	asrs	r3, r3, #31
 800031c:	1ad3      	subs	r3, r2, r3
 800031e:	4a2a      	ldr	r2, [pc, #168]	; (80003c8 <fsm_auto_run_main+0x12c>)
 8000320:	6013      	str	r3, [r2, #0]
			setTimer(&timer1,timeGreen);
 8000322:	4b2a      	ldr	r3, [pc, #168]	; (80003cc <fsm_auto_run_main+0x130>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4619      	mov	r1, r3
 8000328:	4824      	ldr	r0, [pc, #144]	; (80003bc <fsm_auto_run_main+0x120>)
 800032a:	f001 f98b 	bl	8001644 <setTimer>
		}

		break;
 800032e:	e03b      	b.n	80003a8 <fsm_auto_run_main+0x10c>

	case MAIN_YEL:
		yellowOnMain();
 8000330:	f001 f83a 	bl	80013a8 <yellowOnMain>
		if(isTimerExpired(&timer1)) {
 8000334:	4821      	ldr	r0, [pc, #132]	; (80003bc <fsm_auto_run_main+0x120>)
 8000336:	f001 f9b4 	bl	80016a2 <isTimerExpired>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d035      	beq.n	80003ac <fsm_auto_run_main+0x110>
			main_status = MAIN_RED;
 8000340:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <fsm_auto_run_main+0x11c>)
 8000342:	2202      	movs	r2, #2
 8000344:	601a      	str	r2, [r3, #0]
			mainTimeRemain = timeRed/1000;
 8000346:	4b1e      	ldr	r3, [pc, #120]	; (80003c0 <fsm_auto_run_main+0x124>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a1e      	ldr	r2, [pc, #120]	; (80003c4 <fsm_auto_run_main+0x128>)
 800034c:	fb82 1203 	smull	r1, r2, r2, r3
 8000350:	1192      	asrs	r2, r2, #6
 8000352:	17db      	asrs	r3, r3, #31
 8000354:	1ad3      	subs	r3, r2, r3
 8000356:	4a1c      	ldr	r2, [pc, #112]	; (80003c8 <fsm_auto_run_main+0x12c>)
 8000358:	6013      	str	r3, [r2, #0]
			setTimer(&timer1,timeRed);
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <fsm_auto_run_main+0x124>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4619      	mov	r1, r3
 8000360:	4816      	ldr	r0, [pc, #88]	; (80003bc <fsm_auto_run_main+0x120>)
 8000362:	f001 f96f 	bl	8001644 <setTimer>
		}


		break;
 8000366:	e021      	b.n	80003ac <fsm_auto_run_main+0x110>

	case MAIN_GREEN:
		greenOnMain();
 8000368:	f001 f840 	bl	80013ec <greenOnMain>
		if(isTimerExpired(&timer1)) {
 800036c:	4813      	ldr	r0, [pc, #76]	; (80003bc <fsm_auto_run_main+0x120>)
 800036e:	f001 f998 	bl	80016a2 <isTimerExpired>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d01b      	beq.n	80003b0 <fsm_auto_run_main+0x114>
			main_status = MAIN_YEL;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <fsm_auto_run_main+0x11c>)
 800037a:	2203      	movs	r2, #3
 800037c:	601a      	str	r2, [r3, #0]
			mainTimeRemain = timeYel/1000;
 800037e:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <fsm_auto_run_main+0x134>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <fsm_auto_run_main+0x128>)
 8000384:	fb82 1203 	smull	r1, r2, r2, r3
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	17db      	asrs	r3, r3, #31
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <fsm_auto_run_main+0x12c>)
 8000390:	6013      	str	r3, [r2, #0]
			setTimer(&timer1,timeYel);
 8000392:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <fsm_auto_run_main+0x134>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4619      	mov	r1, r3
 8000398:	4808      	ldr	r0, [pc, #32]	; (80003bc <fsm_auto_run_main+0x120>)
 800039a:	f001 f953 	bl	8001644 <setTimer>
		}
		break;
 800039e:	e007      	b.n	80003b0 <fsm_auto_run_main+0x114>

	default:
		break;
 80003a0:	bf00      	nop
 80003a2:	e006      	b.n	80003b2 <fsm_auto_run_main+0x116>
		break;
 80003a4:	bf00      	nop
 80003a6:	e004      	b.n	80003b2 <fsm_auto_run_main+0x116>
		break;
 80003a8:	bf00      	nop
 80003aa:	e002      	b.n	80003b2 <fsm_auto_run_main+0x116>
		break;
 80003ac:	bf00      	nop
 80003ae:	e000      	b.n	80003b2 <fsm_auto_run_main+0x116>
		break;
 80003b0:	bf00      	nop
	}
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000034 	.word	0x20000034
 80003bc:	20000128 	.word	0x20000128
 80003c0:	20000000 	.word	0x20000000
 80003c4:	10624dd3 	.word	0x10624dd3
 80003c8:	20000060 	.word	0x20000060
 80003cc:	20000008 	.word	0x20000008
 80003d0:	20000004 	.word	0x20000004

080003d4 <fsm_auto_run_sub>:

void fsm_auto_run_sub() {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	switch(sub_status) {
 80003d8:	4b45      	ldr	r3, [pc, #276]	; (80004f0 <fsm_auto_run_sub+0x11c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	3b0b      	subs	r3, #11
 80003de:	2b03      	cmp	r3, #3
 80003e0:	d87a      	bhi.n	80004d8 <fsm_auto_run_sub+0x104>
 80003e2:	a201      	add	r2, pc, #4	; (adr r2, 80003e8 <fsm_auto_run_sub+0x14>)
 80003e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e8:	080003f9 	.word	0x080003f9
 80003ec:	08000431 	.word	0x08000431
 80003f0:	08000469 	.word	0x08000469
 80003f4:	080004a1 	.word	0x080004a1
	case SUB_INIT:
		turnOffSubLeds();
 80003f8:	f000 ff3e 	bl	8001278 <turnOffSubLeds>
		if(isTimerExpired(&timer2)) {
 80003fc:	483d      	ldr	r0, [pc, #244]	; (80004f4 <fsm_auto_run_sub+0x120>)
 80003fe:	f001 f950 	bl	80016a2 <isTimerExpired>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d069      	beq.n	80004dc <fsm_auto_run_sub+0x108>
			sub_status = SUB_GREEN;
 8000408:	4b39      	ldr	r3, [pc, #228]	; (80004f0 <fsm_auto_run_sub+0x11c>)
 800040a:	220e      	movs	r2, #14
 800040c:	601a      	str	r2, [r3, #0]
			subTimeRemain = timeGreen/1000;
 800040e:	4b3a      	ldr	r3, [pc, #232]	; (80004f8 <fsm_auto_run_sub+0x124>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a3a      	ldr	r2, [pc, #232]	; (80004fc <fsm_auto_run_sub+0x128>)
 8000414:	fb82 1203 	smull	r1, r2, r2, r3
 8000418:	1192      	asrs	r2, r2, #6
 800041a:	17db      	asrs	r3, r3, #31
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	4a38      	ldr	r2, [pc, #224]	; (8000500 <fsm_auto_run_sub+0x12c>)
 8000420:	6013      	str	r3, [r2, #0]
			setTimer(&timer2,timeGreen);
 8000422:	4b35      	ldr	r3, [pc, #212]	; (80004f8 <fsm_auto_run_sub+0x124>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4619      	mov	r1, r3
 8000428:	4832      	ldr	r0, [pc, #200]	; (80004f4 <fsm_auto_run_sub+0x120>)
 800042a:	f001 f90b 	bl	8001644 <setTimer>
		}

		break;
 800042e:	e055      	b.n	80004dc <fsm_auto_run_sub+0x108>
	case SUB_RED:
		redOnSub();
 8000430:	f000 fffe 	bl	8001430 <redOnSub>
		if(isTimerExpired(&timer2)) {
 8000434:	482f      	ldr	r0, [pc, #188]	; (80004f4 <fsm_auto_run_sub+0x120>)
 8000436:	f001 f934 	bl	80016a2 <isTimerExpired>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d04f      	beq.n	80004e0 <fsm_auto_run_sub+0x10c>
			sub_status = SUB_GREEN;
 8000440:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <fsm_auto_run_sub+0x11c>)
 8000442:	220e      	movs	r2, #14
 8000444:	601a      	str	r2, [r3, #0]
			subTimeRemain = timeGreen/1000;
 8000446:	4b2c      	ldr	r3, [pc, #176]	; (80004f8 <fsm_auto_run_sub+0x124>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a2c      	ldr	r2, [pc, #176]	; (80004fc <fsm_auto_run_sub+0x128>)
 800044c:	fb82 1203 	smull	r1, r2, r2, r3
 8000450:	1192      	asrs	r2, r2, #6
 8000452:	17db      	asrs	r3, r3, #31
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	4a2a      	ldr	r2, [pc, #168]	; (8000500 <fsm_auto_run_sub+0x12c>)
 8000458:	6013      	str	r3, [r2, #0]
			setTimer(&timer2,timeGreen);
 800045a:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <fsm_auto_run_sub+0x124>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4619      	mov	r1, r3
 8000460:	4824      	ldr	r0, [pc, #144]	; (80004f4 <fsm_auto_run_sub+0x120>)
 8000462:	f001 f8ef 	bl	8001644 <setTimer>
		}

		break;
 8000466:	e03b      	b.n	80004e0 <fsm_auto_run_sub+0x10c>
	case SUB_YEL:
		yellowOnSub();
 8000468:	f001 f808 	bl	800147c <yellowOnSub>
		if(isTimerExpired(&timer2)) {
 800046c:	4821      	ldr	r0, [pc, #132]	; (80004f4 <fsm_auto_run_sub+0x120>)
 800046e:	f001 f918 	bl	80016a2 <isTimerExpired>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d035      	beq.n	80004e4 <fsm_auto_run_sub+0x110>
			sub_status = SUB_RED;
 8000478:	4b1d      	ldr	r3, [pc, #116]	; (80004f0 <fsm_auto_run_sub+0x11c>)
 800047a:	220c      	movs	r2, #12
 800047c:	601a      	str	r2, [r3, #0]
			subTimeRemain = timeRed/1000;
 800047e:	4b21      	ldr	r3, [pc, #132]	; (8000504 <fsm_auto_run_sub+0x130>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a1e      	ldr	r2, [pc, #120]	; (80004fc <fsm_auto_run_sub+0x128>)
 8000484:	fb82 1203 	smull	r1, r2, r2, r3
 8000488:	1192      	asrs	r2, r2, #6
 800048a:	17db      	asrs	r3, r3, #31
 800048c:	1ad3      	subs	r3, r2, r3
 800048e:	4a1c      	ldr	r2, [pc, #112]	; (8000500 <fsm_auto_run_sub+0x12c>)
 8000490:	6013      	str	r3, [r2, #0]
			setTimer(&timer2,timeRed);
 8000492:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <fsm_auto_run_sub+0x130>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4619      	mov	r1, r3
 8000498:	4816      	ldr	r0, [pc, #88]	; (80004f4 <fsm_auto_run_sub+0x120>)
 800049a:	f001 f8d3 	bl	8001644 <setTimer>
		}
		break;
 800049e:	e021      	b.n	80004e4 <fsm_auto_run_sub+0x110>
	case SUB_GREEN:
		greenOnSub();
 80004a0:	f001 f812 	bl	80014c8 <greenOnSub>
		if(isTimerExpired(&timer2)) {
 80004a4:	4813      	ldr	r0, [pc, #76]	; (80004f4 <fsm_auto_run_sub+0x120>)
 80004a6:	f001 f8fc 	bl	80016a2 <isTimerExpired>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d01b      	beq.n	80004e8 <fsm_auto_run_sub+0x114>
			sub_status = SUB_YEL;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <fsm_auto_run_sub+0x11c>)
 80004b2:	220d      	movs	r2, #13
 80004b4:	601a      	str	r2, [r3, #0]
			subTimeRemain = timeYel/1000;
 80004b6:	4b14      	ldr	r3, [pc, #80]	; (8000508 <fsm_auto_run_sub+0x134>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a10      	ldr	r2, [pc, #64]	; (80004fc <fsm_auto_run_sub+0x128>)
 80004bc:	fb82 1203 	smull	r1, r2, r2, r3
 80004c0:	1192      	asrs	r2, r2, #6
 80004c2:	17db      	asrs	r3, r3, #31
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <fsm_auto_run_sub+0x12c>)
 80004c8:	6013      	str	r3, [r2, #0]
			setTimer(&timer2,timeYel);
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <fsm_auto_run_sub+0x134>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4619      	mov	r1, r3
 80004d0:	4808      	ldr	r0, [pc, #32]	; (80004f4 <fsm_auto_run_sub+0x120>)
 80004d2:	f001 f8b7 	bl	8001644 <setTimer>
		}

		break;
 80004d6:	e007      	b.n	80004e8 <fsm_auto_run_sub+0x114>
	default:
		break;
 80004d8:	bf00      	nop
 80004da:	e006      	b.n	80004ea <fsm_auto_run_sub+0x116>
		break;
 80004dc:	bf00      	nop
 80004de:	e004      	b.n	80004ea <fsm_auto_run_sub+0x116>
		break;
 80004e0:	bf00      	nop
 80004e2:	e002      	b.n	80004ea <fsm_auto_run_sub+0x116>
		break;
 80004e4:	bf00      	nop
 80004e6:	e000      	b.n	80004ea <fsm_auto_run_sub+0x116>
		break;
 80004e8:	bf00      	nop
	}
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000038 	.word	0x20000038
 80004f4:	20000108 	.word	0x20000108
 80004f8:	20000008 	.word	0x20000008
 80004fc:	10624dd3 	.word	0x10624dd3
 8000500:	20000064 	.word	0x20000064
 8000504:	20000000 	.word	0x20000000
 8000508:	20000004 	.word	0x20000004

0800050c <fsm_auto_run>:

void fsm_auto_run() {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
		fsm_auto_run_main();
 8000510:	f7ff fec4 	bl	800029c <fsm_auto_run_main>
		fsm_auto_run_sub();
 8000514:	f7ff ff5e 	bl	80003d4 <fsm_auto_run_sub>

		updateCountdown();
 8000518:	f000 fe58 	bl	80011cc <updateCountdown>
	}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}

08000520 <fsm_manual_run>:
#include "sw_timer.h"
#include "mode_control.h"
#include "set7SEG.h"
int manual_status = 0;

void fsm_manual_run() {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	switch(manual_status) {
 8000524:	4b47      	ldr	r3, [pc, #284]	; (8000644 <fsm_manual_run+0x124>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b18      	cmp	r3, #24
 800052a:	d056      	beq.n	80005da <fsm_manual_run+0xba>
 800052c:	2b18      	cmp	r3, #24
 800052e:	dc7c      	bgt.n	800062a <fsm_manual_run+0x10a>
 8000530:	2b16      	cmp	r3, #22
 8000532:	d002      	beq.n	800053a <fsm_manual_run+0x1a>
 8000534:	2b17      	cmp	r3, #23
 8000536:	d028      	beq.n	800058a <fsm_manual_run+0x6a>
			setTimer(&timer1,100);
		}

		break;
	default:
		break;
 8000538:	e077      	b.n	800062a <fsm_manual_run+0x10a>
		redOnMain();
 800053a:	f000 ff13 	bl	8001364 <redOnMain>
		redOnSub();
 800053e:	f000 ff77 	bl	8001430 <redOnSub>
		mainTimeRemain = tempRed;
 8000542:	4b41      	ldr	r3, [pc, #260]	; (8000648 <fsm_manual_run+0x128>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a41      	ldr	r2, [pc, #260]	; (800064c <fsm_manual_run+0x12c>)
 8000548:	6013      	str	r3, [r2, #0]
		subTimeRemain  = tempRed;
 800054a:	4b3f      	ldr	r3, [pc, #252]	; (8000648 <fsm_manual_run+0x128>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a40      	ldr	r2, [pc, #256]	; (8000650 <fsm_manual_run+0x130>)
 8000550:	6013      	str	r3, [r2, #0]
		updateCountTime(mainTimeRemain, subTimeRemain);
 8000552:	4b3e      	ldr	r3, [pc, #248]	; (800064c <fsm_manual_run+0x12c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a3e      	ldr	r2, [pc, #248]	; (8000650 <fsm_manual_run+0x130>)
 8000558:	6812      	ldr	r2, [r2, #0]
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f000 fd77 	bl	8001050 <updateCountTime>
		if(isTimerExpired(&timeNoReact)) {
 8000562:	483c      	ldr	r0, [pc, #240]	; (8000654 <fsm_manual_run+0x134>)
 8000564:	f001 f89d 	bl	80016a2 <isTimerExpired>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d05f      	beq.n	800062e <fsm_manual_run+0x10e>
			mode = MODE_AUTO;
 800056e:	4b3a      	ldr	r3, [pc, #232]	; (8000658 <fsm_manual_run+0x138>)
 8000570:	2265      	movs	r2, #101	; 0x65
 8000572:	601a      	str	r2, [r3, #0]
			main_status = MAIN_INIT;
 8000574:	4b39      	ldr	r3, [pc, #228]	; (800065c <fsm_manual_run+0x13c>)
 8000576:	2201      	movs	r2, #1
 8000578:	601a      	str	r2, [r3, #0]
			sub_status  = SUB_INIT;
 800057a:	4b39      	ldr	r3, [pc, #228]	; (8000660 <fsm_manual_run+0x140>)
 800057c:	220b      	movs	r2, #11
 800057e:	601a      	str	r2, [r3, #0]
			setTimer(&timeNoReact,100);
 8000580:	2164      	movs	r1, #100	; 0x64
 8000582:	4834      	ldr	r0, [pc, #208]	; (8000654 <fsm_manual_run+0x134>)
 8000584:	f001 f85e 	bl	8001644 <setTimer>
		break;
 8000588:	e051      	b.n	800062e <fsm_manual_run+0x10e>
		yellowOnMain();
 800058a:	f000 ff0d 	bl	80013a8 <yellowOnMain>
		yellowOnSub();
 800058e:	f000 ff75 	bl	800147c <yellowOnSub>
		mainTimeRemain = tempYel;
 8000592:	4b34      	ldr	r3, [pc, #208]	; (8000664 <fsm_manual_run+0x144>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a2d      	ldr	r2, [pc, #180]	; (800064c <fsm_manual_run+0x12c>)
 8000598:	6013      	str	r3, [r2, #0]
		subTimeRemain  = tempYel;
 800059a:	4b32      	ldr	r3, [pc, #200]	; (8000664 <fsm_manual_run+0x144>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a2c      	ldr	r2, [pc, #176]	; (8000650 <fsm_manual_run+0x130>)
 80005a0:	6013      	str	r3, [r2, #0]
		updateCountTime(mainTimeRemain, subTimeRemain);
 80005a2:	4b2a      	ldr	r3, [pc, #168]	; (800064c <fsm_manual_run+0x12c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a2a      	ldr	r2, [pc, #168]	; (8000650 <fsm_manual_run+0x130>)
 80005a8:	6812      	ldr	r2, [r2, #0]
 80005aa:	4611      	mov	r1, r2
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fd4f 	bl	8001050 <updateCountTime>
		if(isTimerExpired(&timeNoReact)) {
 80005b2:	4828      	ldr	r0, [pc, #160]	; (8000654 <fsm_manual_run+0x134>)
 80005b4:	f001 f875 	bl	80016a2 <isTimerExpired>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d039      	beq.n	8000632 <fsm_manual_run+0x112>
			mode = MODE_AUTO;
 80005be:	4b26      	ldr	r3, [pc, #152]	; (8000658 <fsm_manual_run+0x138>)
 80005c0:	2265      	movs	r2, #101	; 0x65
 80005c2:	601a      	str	r2, [r3, #0]
			main_status = MAIN_INIT;
 80005c4:	4b25      	ldr	r3, [pc, #148]	; (800065c <fsm_manual_run+0x13c>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	601a      	str	r2, [r3, #0]
			sub_status  = SUB_INIT;
 80005ca:	4b25      	ldr	r3, [pc, #148]	; (8000660 <fsm_manual_run+0x140>)
 80005cc:	220b      	movs	r2, #11
 80005ce:	601a      	str	r2, [r3, #0]
			setTimer(&timeNoReact,100);
 80005d0:	2164      	movs	r1, #100	; 0x64
 80005d2:	4820      	ldr	r0, [pc, #128]	; (8000654 <fsm_manual_run+0x134>)
 80005d4:	f001 f836 	bl	8001644 <setTimer>
		break;
 80005d8:	e02b      	b.n	8000632 <fsm_manual_run+0x112>
		greenOnMain();
 80005da:	f000 ff07 	bl	80013ec <greenOnMain>
		greenOnSub();
 80005de:	f000 ff73 	bl	80014c8 <greenOnSub>
		mainTimeRemain = tempGreen;
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <fsm_manual_run+0x148>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a19      	ldr	r2, [pc, #100]	; (800064c <fsm_manual_run+0x12c>)
 80005e8:	6013      	str	r3, [r2, #0]
		subTimeRemain  = tempGreen;
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <fsm_manual_run+0x148>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a18      	ldr	r2, [pc, #96]	; (8000650 <fsm_manual_run+0x130>)
 80005f0:	6013      	str	r3, [r2, #0]
		updateCountTime(mainTimeRemain, subTimeRemain);
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <fsm_manual_run+0x12c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a16      	ldr	r2, [pc, #88]	; (8000650 <fsm_manual_run+0x130>)
 80005f8:	6812      	ldr	r2, [r2, #0]
 80005fa:	4611      	mov	r1, r2
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fd27 	bl	8001050 <updateCountTime>
		if(isTimerExpired(&timeNoReact)) {
 8000602:	4814      	ldr	r0, [pc, #80]	; (8000654 <fsm_manual_run+0x134>)
 8000604:	f001 f84d 	bl	80016a2 <isTimerExpired>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d013      	beq.n	8000636 <fsm_manual_run+0x116>
			mode = MODE_AUTO;
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <fsm_manual_run+0x138>)
 8000610:	2265      	movs	r2, #101	; 0x65
 8000612:	601a      	str	r2, [r3, #0]
			main_status = MAIN_INIT;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <fsm_manual_run+0x13c>)
 8000616:	2201      	movs	r2, #1
 8000618:	601a      	str	r2, [r3, #0]
			sub_status  = SUB_INIT;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <fsm_manual_run+0x140>)
 800061c:	220b      	movs	r2, #11
 800061e:	601a      	str	r2, [r3, #0]
			setTimer(&timer1,100);
 8000620:	2164      	movs	r1, #100	; 0x64
 8000622:	4812      	ldr	r0, [pc, #72]	; (800066c <fsm_manual_run+0x14c>)
 8000624:	f001 f80e 	bl	8001644 <setTimer>
		break;
 8000628:	e005      	b.n	8000636 <fsm_manual_run+0x116>
		break;
 800062a:	bf00      	nop
 800062c:	e004      	b.n	8000638 <fsm_manual_run+0x118>
		break;
 800062e:	bf00      	nop
 8000630:	e002      	b.n	8000638 <fsm_manual_run+0x118>
		break;
 8000632:	bf00      	nop
 8000634:	e000      	b.n	8000638 <fsm_manual_run+0x118>
		break;
 8000636:	bf00      	nop
	}
	updateManualTime();
 8000638:	f000 fa9c 	bl	8000b74 <updateManualTime>
	saveManualTime();
 800063c:	f000 fb02 	bl	8000c44 <saveManualTime>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000003c 	.word	0x2000003c
 8000648:	20000044 	.word	0x20000044
 800064c:	20000060 	.word	0x20000060
 8000650:	20000064 	.word	0x20000064
 8000654:	20000110 	.word	0x20000110
 8000658:	20000040 	.word	0x20000040
 800065c:	20000034 	.word	0x20000034
 8000660:	20000038 	.word	0x20000038
 8000664:	20000048 	.word	0x20000048
 8000668:	2000004c 	.word	0x2000004c
 800066c:	20000128 	.word	0x20000128

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f001 f880 	bl	8001778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f888 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 f90e 	bl	800089c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000680:	f000 f8c0 	bl	8000804 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //initAllButtons();
  initAllButtons();
 8000684:	f7ff fdd8 	bl	8000238 <initAllButtons>
  initAllTimer();
 8000688:	f001 f81e 	bl	80016c8 <initAllTimer>
  HAL_TIM_Base_Start_IT(&htim2);
 800068c:	4831      	ldr	r0, [pc, #196]	; (8000754 <main+0xe4>)
 800068e:	f001 ffd1 	bl	8002634 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  main_status = MAIN_INIT;
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <main+0xe8>)
 8000694:	2201      	movs	r2, #1
 8000696:	601a      	str	r2, [r3, #0]
  sub_status  = SUB_INIT;
 8000698:	4b30      	ldr	r3, [pc, #192]	; (800075c <main+0xec>)
 800069a:	220b      	movs	r2, #11
 800069c:	601a      	str	r2, [r3, #0]
  mode = MODE_AUTO;
 800069e:	4b30      	ldr	r3, [pc, #192]	; (8000760 <main+0xf0>)
 80006a0:	2265      	movs	r2, #101	; 0x65
 80006a2:	601a      	str	r2, [r3, #0]
  setTimer(&timer1,100);
 80006a4:	2164      	movs	r1, #100	; 0x64
 80006a6:	482f      	ldr	r0, [pc, #188]	; (8000764 <main+0xf4>)
 80006a8:	f000 ffcc 	bl	8001644 <setTimer>
  setTimer(&timer2,100);
 80006ac:	2164      	movs	r1, #100	; 0x64
 80006ae:	482e      	ldr	r0, [pc, #184]	; (8000768 <main+0xf8>)
 80006b0:	f000 ffc8 	bl	8001644 <setTimer>
  setTimer(&timer3,100);
 80006b4:	2164      	movs	r1, #100	; 0x64
 80006b6:	482d      	ldr	r0, [pc, #180]	; (800076c <main+0xfc>)
 80006b8:	f000 ffc4 	bl	8001644 <setTimer>
  setTimer(&timer4,100);
 80006bc:	2164      	movs	r1, #100	; 0x64
 80006be:	482c      	ldr	r0, [pc, #176]	; (8000770 <main+0x100>)
 80006c0:	f000 ffc0 	bl	8001644 <setTimer>
  setTimer(&timerTestLed,100);
 80006c4:	2164      	movs	r1, #100	; 0x64
 80006c6:	482b      	ldr	r0, [pc, #172]	; (8000774 <main+0x104>)
 80006c8:	f000 ffbc 	bl	8001644 <setTimer>
  setTimer(&timeNoReact,100);
 80006cc:	2164      	movs	r1, #100	; 0x64
 80006ce:	482a      	ldr	r0, [pc, #168]	; (8000778 <main+0x108>)
 80006d0:	f000 ffb8 	bl	8001644 <setTimer>
  setTimer(&timerBlinky1,100);
 80006d4:	2164      	movs	r1, #100	; 0x64
 80006d6:	4829      	ldr	r0, [pc, #164]	; (800077c <main+0x10c>)
 80006d8:	f000 ffb4 	bl	8001644 <setTimer>
  setTimer(&timerBlinky2,100);
 80006dc:	2164      	movs	r1, #100	; 0x64
 80006de:	4828      	ldr	r0, [pc, #160]	; (8000780 <main+0x110>)
 80006e0:	f000 ffb0 	bl	8001644 <setTimer>

  while (1)
  {
	  if(isTimerExpired(&timerTestLed)) {
 80006e4:	4823      	ldr	r0, [pc, #140]	; (8000774 <main+0x104>)
 80006e6:	f000 ffdc 	bl	80016a2 <isTimerExpired>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d008      	beq.n	8000702 <main+0x92>
		  HAL_GPIO_TogglePin(GPIOA, RED_LED_TEST_Pin | YEL_LED_TEST_Pin | GREEN_LED_TEST_Pin);
 80006f0:	210e      	movs	r1, #14
 80006f2:	4824      	ldr	r0, [pc, #144]	; (8000784 <main+0x114>)
 80006f4:	f001 fb59 	bl	8001daa <HAL_GPIO_TogglePin>
		  setTimer(&timerTestLed,1000);
 80006f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006fc:	481d      	ldr	r0, [pc, #116]	; (8000774 <main+0x104>)
 80006fe:	f000 ffa1 	bl	8001644 <setTimer>
	  }
	  checkMode();
 8000702:	f000 f9f1 	bl	8000ae8 <checkMode>
	  if(mode == MODE_AUTO) {
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <main+0xf0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b65      	cmp	r3, #101	; 0x65
 800070c:	d101      	bne.n	8000712 <main+0xa2>
		  fsm_auto_run();
 800070e:	f7ff fefd 	bl	800050c <fsm_auto_run>
	  }
	  if (mode == MODE_MANUAL){
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <main+0xf0>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b66      	cmp	r3, #102	; 0x66
 8000718:	d101      	bne.n	800071e <main+0xae>
		  fsm_manual_run();
 800071a:	f7ff ff01 	bl	8000520 <fsm_manual_run>
	  }
	if(isTimerExpired(&timer4)) {
 800071e:	4814      	ldr	r0, [pc, #80]	; (8000770 <main+0x100>)
 8000720:	f000 ffbf 	bl	80016a2 <isTimerExpired>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d0dc      	beq.n	80006e4 <main+0x74>
		showTime(led_idx++);
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <main+0x118>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	4915      	ldr	r1, [pc, #84]	; (8000788 <main+0x118>)
 8000732:	600a      	str	r2, [r1, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fcf1 	bl	800111c <showTime>
		if (led_idx >= 6 ) led_idx = 0;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <main+0x118>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b05      	cmp	r3, #5
 8000740:	dd02      	ble.n	8000748 <main+0xd8>
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <main+0x118>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
		setTimer(&timer4,165);
 8000748:	21a5      	movs	r1, #165	; 0xa5
 800074a:	4809      	ldr	r0, [pc, #36]	; (8000770 <main+0x100>)
 800074c:	f000 ff7a 	bl	8001644 <setTimer>
	  if(isTimerExpired(&timerTestLed)) {
 8000750:	e7c8      	b.n	80006e4 <main+0x74>
 8000752:	bf00      	nop
 8000754:	200000a4 	.word	0x200000a4
 8000758:	20000034 	.word	0x20000034
 800075c:	20000038 	.word	0x20000038
 8000760:	20000040 	.word	0x20000040
 8000764:	20000128 	.word	0x20000128
 8000768:	20000108 	.word	0x20000108
 800076c:	20000140 	.word	0x20000140
 8000770:	20000120 	.word	0x20000120
 8000774:	20000138 	.word	0x20000138
 8000778:	20000110 	.word	0x20000110
 800077c:	20000118 	.word	0x20000118
 8000780:	20000130 	.word	0x20000130
 8000784:	40010800 	.word	0x40010800
 8000788:	2000005c 	.word	0x2000005c

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b090      	sub	sp, #64	; 0x40
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	2228      	movs	r2, #40	; 0x28
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fafa 	bl	8002d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ae:	2302      	movs	r3, #2
 80007b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b2:	2301      	movs	r3, #1
 80007b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b6:	2310      	movs	r3, #16
 80007b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 0318 	add.w	r3, r7, #24
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fb0a 	bl	8001ddc <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007ce:	f000 f909 	bl	80009e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	230f      	movs	r3, #15
 80007d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fd76 	bl	80022dc <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007f6:	f000 f8f5 	bl	80009e4 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3740      	adds	r7, #64	; 0x40
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000818:	463b      	mov	r3, r7
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_TIM2_Init+0x94>)
 8000822:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000826:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_TIM2_Init+0x94>)
 800082a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800082e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_TIM2_Init+0x94>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_TIM2_Init+0x94>)
 8000838:	2209      	movs	r2, #9
 800083a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_TIM2_Init+0x94>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_TIM2_Init+0x94>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000848:	4813      	ldr	r0, [pc, #76]	; (8000898 <MX_TIM2_Init+0x94>)
 800084a:	f001 fea3 	bl	8002594 <HAL_TIM_Base_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000854:	f000 f8c6 	bl	80009e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4619      	mov	r1, r3
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_TIM2_Init+0x94>)
 8000866:	f002 f821 	bl	80028ac <HAL_TIM_ConfigClockSource>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000870:	f000 f8b8 	bl	80009e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_TIM2_Init+0x94>)
 8000882:	f002 f9f9 	bl	8002c78 <HAL_TIMEx_MasterConfigSynchronization>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800088c:	f000 f8aa 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000a4 	.word	0x200000a4

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b29      	ldr	r3, [pc, #164]	; (8000958 <MX_GPIO_Init+0xbc>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a28      	ldr	r2, [pc, #160]	; (8000958 <MX_GPIO_Init+0xbc>)
 80008b6:	f043 0304 	orr.w	r3, r3, #4
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b26      	ldr	r3, [pc, #152]	; (8000958 <MX_GPIO_Init+0xbc>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <MX_GPIO_Init+0xbc>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a22      	ldr	r2, [pc, #136]	; (8000958 <MX_GPIO_Init+0xbc>)
 80008ce:	f043 0308 	orr.w	r3, r3, #8
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_GPIO_Init+0xbc>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0308 	and.w	r3, r3, #8
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED_TEST_Pin|YEL_LED_TEST_Pin|GREEN_LED_TEST_Pin|RED1_Pin
 80008e0:	2200      	movs	r2, #0
 80008e2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80008e6:	481d      	ldr	r0, [pc, #116]	; (800095c <MX_GPIO_Init+0xc0>)
 80008e8:	f001 fa47 	bl	8001d7a <HAL_GPIO_WritePin>
                          |YEL1_Pin|GREEN1_Pin|RED3_Pin|YEL3_Pin
                          |GREEN3_Pin|RED2_Pin|YEL2_Pin|GREEN2_Pin
                          |RED4_Pin|YEL4_Pin|GREEN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_a_Pin|LED_b_Pin|LED_c_Pin|EN1_Pin
 80008ec:	2200      	movs	r2, #0
 80008ee:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 80008f2:	481b      	ldr	r0, [pc, #108]	; (8000960 <MX_GPIO_Init+0xc4>)
 80008f4:	f001 fa41 	bl	8001d7a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_LED_TEST_Pin YEL_LED_TEST_Pin GREEN_LED_TEST_Pin RED1_Pin
                           YEL1_Pin GREEN1_Pin RED3_Pin YEL3_Pin
                           GREEN3_Pin RED2_Pin YEL2_Pin GREEN2_Pin
                           RED4_Pin YEL4_Pin GREEN4_Pin */
  GPIO_InitStruct.Pin = RED_LED_TEST_Pin|YEL_LED_TEST_Pin|GREEN_LED_TEST_Pin|RED1_Pin
 80008f8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80008fc:	60bb      	str	r3, [r7, #8]
                          |YEL1_Pin|GREEN1_Pin|RED3_Pin|YEL3_Pin
                          |GREEN3_Pin|RED2_Pin|YEL2_Pin|GREEN2_Pin
                          |RED4_Pin|YEL4_Pin|GREEN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2302      	movs	r3, #2
 8000908:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4619      	mov	r1, r3
 8000910:	4812      	ldr	r0, [pc, #72]	; (800095c <MX_GPIO_Init+0xc0>)
 8000912:	f001 f8a1 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_a_Pin LED_b_Pin LED_c_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN4_Pin EN5_Pin
                           EN6_Pin LED_d_Pin LED_e_Pin LED_f_Pin
                           LED_g_Pin */
  GPIO_InitStruct.Pin = LED_a_Pin|LED_b_Pin|LED_c_Pin|EN1_Pin
 8000916:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 800091a:	60bb      	str	r3, [r7, #8]
                          |EN2_Pin|EN3_Pin|EN4_Pin|EN5_Pin
                          |EN6_Pin|LED_d_Pin|LED_e_Pin|LED_f_Pin
                          |LED_g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2302      	movs	r3, #2
 8000926:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	4619      	mov	r1, r3
 800092e:	480c      	ldr	r0, [pc, #48]	; (8000960 <MX_GPIO_Init+0xc4>)
 8000930:	f001 f892 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : but_1_Pin but_2_Pin but_3_Pin */
  GPIO_InitStruct.Pin = but_1_Pin|but_2_Pin|but_3_Pin;
 8000934:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000938:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093e:	2301      	movs	r3, #1
 8000940:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_GPIO_Init+0xc4>)
 800094a:	f001 f885 	bl	8001a58 <HAL_GPIO_Init>

}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000
 800095c:	40010800 	.word	0x40010800
 8000960:	40010c00 	.word	0x40010c00

08000964 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
		timerRun(&timer1);
 800096c:	4812      	ldr	r0, [pc, #72]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800096e:	f000 fe7f 	bl	8001670 <timerRun>
		timerRun(&timer2);
 8000972:	4812      	ldr	r0, [pc, #72]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000974:	f000 fe7c 	bl	8001670 <timerRun>
		timerRun(&timer3);
 8000978:	4811      	ldr	r0, [pc, #68]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800097a:	f000 fe79 	bl	8001670 <timerRun>
		timerRun(&timer4);
 800097e:	4811      	ldr	r0, [pc, #68]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000980:	f000 fe76 	bl	8001670 <timerRun>
		timerRun(&timerTestLed);
 8000984:	4810      	ldr	r0, [pc, #64]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000986:	f000 fe73 	bl	8001670 <timerRun>
		timerRun(&timeNoReact);
 800098a:	4810      	ldr	r0, [pc, #64]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x68>)
 800098c:	f000 fe70 	bl	8001670 <timerRun>
		timerRun(&timerBlinky1);
 8000990:	480f      	ldr	r0, [pc, #60]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000992:	f000 fe6d 	bl	8001670 <timerRun>
		timerRun(&timerBlinky2);
 8000996:	480f      	ldr	r0, [pc, #60]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000998:	f000 fe6a 	bl	8001670 <timerRun>

		getKeyInput(&button1);
 800099c:	480e      	ldr	r0, [pc, #56]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800099e:	f7ff fbfb 	bl	8000198 <getKeyInput>
		getKeyInput(&button2);
 80009a2:	480e      	ldr	r0, [pc, #56]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x78>)
 80009a4:	f7ff fbf8 	bl	8000198 <getKeyInput>
		getKeyInput(&button3);
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80009aa:	f7ff fbf5 	bl	8000198 <getKeyInput>
	}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000128 	.word	0x20000128
 80009bc:	20000108 	.word	0x20000108
 80009c0:	20000140 	.word	0x20000140
 80009c4:	20000120 	.word	0x20000120
 80009c8:	20000138 	.word	0x20000138
 80009cc:	20000110 	.word	0x20000110
 80009d0:	20000118 	.word	0x20000118
 80009d4:	20000130 	.word	0x20000130
 80009d8:	20000090 	.word	0x20000090
 80009dc:	20000068 	.word	0x20000068
 80009e0:	2000007c 	.word	0x2000007c

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <entryState>:
int backupRed = 0;
int backupYel = 0;
int backupGreen = 0;
uint8_t isEditted;

void entryState(int state) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	manual_status = state;
 80009f8:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <entryState+0x7c>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]

	tempRed   = timeRed / 1000;
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <entryState+0x80>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a1c      	ldr	r2, [pc, #112]	; (8000a74 <entryState+0x84>)
 8000a04:	fb82 1203 	smull	r1, r2, r2, r3
 8000a08:	1192      	asrs	r2, r2, #6
 8000a0a:	17db      	asrs	r3, r3, #31
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	4a1a      	ldr	r2, [pc, #104]	; (8000a78 <entryState+0x88>)
 8000a10:	6013      	str	r3, [r2, #0]
	tempYel   = timeYel / 1000;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <entryState+0x8c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <entryState+0x84>)
 8000a18:	fb82 1203 	smull	r1, r2, r2, r3
 8000a1c:	1192      	asrs	r2, r2, #6
 8000a1e:	17db      	asrs	r3, r3, #31
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <entryState+0x90>)
 8000a24:	6013      	str	r3, [r2, #0]
	tempGreen = timeGreen / 1000;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <entryState+0x94>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <entryState+0x84>)
 8000a2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a30:	1192      	asrs	r2, r2, #6
 8000a32:	17db      	asrs	r3, r3, #31
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <entryState+0x98>)
 8000a38:	6013      	str	r3, [r2, #0]

	backupRed = tempRed;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <entryState+0x88>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <entryState+0x9c>)
 8000a40:	6013      	str	r3, [r2, #0]
	backupYel = tempYel;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <entryState+0x90>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <entryState+0xa0>)
 8000a48:	6013      	str	r3, [r2, #0]
	backupGreen = tempGreen;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <entryState+0x98>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a11      	ldr	r2, [pc, #68]	; (8000a94 <entryState+0xa4>)
 8000a50:	6013      	str	r3, [r2, #0]

	isEditted = 0;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <entryState+0xa8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]

	setTimer(&timeNoReact,10000);
 8000a58:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a5c:	480f      	ldr	r0, [pc, #60]	; (8000a9c <entryState+0xac>)
 8000a5e:	f000 fdf1 	bl	8001644 <setTimer>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000003c 	.word	0x2000003c
 8000a70:	20000000 	.word	0x20000000
 8000a74:	10624dd3 	.word	0x10624dd3
 8000a78:	20000044 	.word	0x20000044
 8000a7c:	20000004 	.word	0x20000004
 8000a80:	20000048 	.word	0x20000048
 8000a84:	20000008 	.word	0x20000008
 8000a88:	2000004c 	.word	0x2000004c
 8000a8c:	20000050 	.word	0x20000050
 8000a90:	20000054 	.word	0x20000054
 8000a94:	20000058 	.word	0x20000058
 8000a98:	200000ec 	.word	0x200000ec
 8000a9c:	20000110 	.word	0x20000110

08000aa0 <restoreBackup>:

void restoreBackup() {
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
	tempRed = backupRed;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <restoreBackup+0x2c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a09      	ldr	r2, [pc, #36]	; (8000ad0 <restoreBackup+0x30>)
 8000aaa:	6013      	str	r3, [r2, #0]
	tempYel = backupYel;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <restoreBackup+0x34>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a09      	ldr	r2, [pc, #36]	; (8000ad8 <restoreBackup+0x38>)
 8000ab2:	6013      	str	r3, [r2, #0]
	tempGreen = backupGreen;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <restoreBackup+0x3c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a09      	ldr	r2, [pc, #36]	; (8000ae0 <restoreBackup+0x40>)
 8000aba:	6013      	str	r3, [r2, #0]

	isEditted = 0;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <restoreBackup+0x44>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000050 	.word	0x20000050
 8000ad0:	20000044 	.word	0x20000044
 8000ad4:	20000054 	.word	0x20000054
 8000ad8:	20000048 	.word	0x20000048
 8000adc:	20000058 	.word	0x20000058
 8000ae0:	2000004c 	.word	0x2000004c
 8000ae4:	200000ec 	.word	0x200000ec

08000ae8 <checkMode>:

void checkMode() {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	if(isButtonPressed(&button1)) {
 8000aec:	481b      	ldr	r0, [pc, #108]	; (8000b5c <checkMode+0x74>)
 8000aee:	f7ff fbc1 	bl	8000274 <isButtonPressed>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d02d      	beq.n	8000b54 <checkMode+0x6c>
		if(mode == MODE_AUTO){
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <checkMode+0x78>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b65      	cmp	r3, #101	; 0x65
 8000afe:	d106      	bne.n	8000b0e <checkMode+0x26>
			mode = MODE_MANUAL;
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <checkMode+0x78>)
 8000b02:	2266      	movs	r2, #102	; 0x66
 8000b04:	601a      	str	r2, [r3, #0]

			entryState(MAN_RED);
 8000b06:	2016      	movs	r0, #22
 8000b08:	f7ff ff72 	bl	80009f0 <entryState>
                sub_status  = SUB_INIT;
                break;
			}
		}
	}
}
 8000b0c:	e023      	b.n	8000b56 <checkMode+0x6e>
			if(isEditted == 1) {
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <checkMode+0x7c>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d101      	bne.n	8000b1a <checkMode+0x32>
				restoreBackup();
 8000b16:	f7ff ffc3 	bl	8000aa0 <restoreBackup>
			switch(manual_status) {
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <checkMode+0x80>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b18      	cmp	r3, #24
 8000b20:	d00e      	beq.n	8000b40 <checkMode+0x58>
 8000b22:	2b18      	cmp	r3, #24
 8000b24:	dc17      	bgt.n	8000b56 <checkMode+0x6e>
 8000b26:	2b16      	cmp	r3, #22
 8000b28:	d002      	beq.n	8000b30 <checkMode+0x48>
 8000b2a:	2b17      	cmp	r3, #23
 8000b2c:	d004      	beq.n	8000b38 <checkMode+0x50>
}
 8000b2e:	e012      	b.n	8000b56 <checkMode+0x6e>
				entryState(MAN_YEL);
 8000b30:	2017      	movs	r0, #23
 8000b32:	f7ff ff5d 	bl	80009f0 <entryState>
				break;
 8000b36:	e00e      	b.n	8000b56 <checkMode+0x6e>
				entryState(MAN_GREEN);
 8000b38:	2018      	movs	r0, #24
 8000b3a:	f7ff ff59 	bl	80009f0 <entryState>
				break;
 8000b3e:	e00a      	b.n	8000b56 <checkMode+0x6e>
                mode = MODE_AUTO;
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <checkMode+0x78>)
 8000b42:	2265      	movs	r2, #101	; 0x65
 8000b44:	601a      	str	r2, [r3, #0]
                main_status = MAIN_INIT;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <checkMode+0x84>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	601a      	str	r2, [r3, #0]
                sub_status  = SUB_INIT;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <checkMode+0x88>)
 8000b4e:	220b      	movs	r2, #11
 8000b50:	601a      	str	r2, [r3, #0]
                break;
 8000b52:	e000      	b.n	8000b56 <checkMode+0x6e>
		}
 8000b54:	bf00      	nop
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000090 	.word	0x20000090
 8000b60:	20000040 	.word	0x20000040
 8000b64:	200000ec 	.word	0x200000ec
 8000b68:	2000003c 	.word	0x2000003c
 8000b6c:	20000034 	.word	0x20000034
 8000b70:	20000038 	.word	0x20000038

08000b74 <updateManualTime>:

void updateManualTime() {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	if(isButtonPressed(&button2) && mode == MODE_MANUAL) {
 8000b78:	482a      	ldr	r0, [pc, #168]	; (8000c24 <updateManualTime+0xb0>)
 8000b7a:	f7ff fb7b 	bl	8000274 <isButtonPressed>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d045      	beq.n	8000c10 <updateManualTime+0x9c>
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <updateManualTime+0xb4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b66      	cmp	r3, #102	; 0x66
 8000b8a:	d141      	bne.n	8000c10 <updateManualTime+0x9c>
		isEditted = 1;
 8000b8c:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <updateManualTime+0xb8>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]

		setTimer(&timeNoReact,10000);
 8000b92:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b96:	4826      	ldr	r0, [pc, #152]	; (8000c30 <updateManualTime+0xbc>)
 8000b98:	f000 fd54 	bl	8001644 <setTimer>

		switch(manual_status) {
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <updateManualTime+0xc0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b18      	cmp	r3, #24
 8000ba2:	d02a      	beq.n	8000bfa <updateManualTime+0x86>
 8000ba4:	2b18      	cmp	r3, #24
 8000ba6:	dc35      	bgt.n	8000c14 <updateManualTime+0xa0>
 8000ba8:	2b16      	cmp	r3, #22
 8000baa:	d002      	beq.n	8000bb2 <updateManualTime+0x3e>
 8000bac:	2b17      	cmp	r3, #23
 8000bae:	d012      	beq.n	8000bd6 <updateManualTime+0x62>
			tempGreen	+= 1;
			tempRed		+= 1;
			break;

		default:
			break;
 8000bb0:	e030      	b.n	8000c14 <updateManualTime+0xa0>
			tempRed   += 1;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <updateManualTime+0xc4>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <updateManualTime+0xc4>)
 8000bba:	6013      	str	r3, [r2, #0]
			tempGreen += 1;
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <updateManualTime+0xc8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <updateManualTime+0xc8>)
 8000bc4:	6013      	str	r3, [r2, #0]
			if (tempRed >= 100) tempRed = 1;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <updateManualTime+0xc4>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b63      	cmp	r3, #99	; 0x63
 8000bcc:	dd24      	ble.n	8000c18 <updateManualTime+0xa4>
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <updateManualTime+0xc4>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	601a      	str	r2, [r3, #0]
			break;
 8000bd4:	e020      	b.n	8000c18 <updateManualTime+0xa4>
			tempYel		+= 1;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <updateManualTime+0xcc>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <updateManualTime+0xcc>)
 8000bde:	6013      	str	r3, [r2, #0]
			tempRed 	+= 1;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <updateManualTime+0xc4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <updateManualTime+0xc4>)
 8000be8:	6013      	str	r3, [r2, #0]
			if(tempYel >= 100) tempYel = 1;
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <updateManualTime+0xcc>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b63      	cmp	r3, #99	; 0x63
 8000bf0:	dd14      	ble.n	8000c1c <updateManualTime+0xa8>
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <updateManualTime+0xcc>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]
			break;
 8000bf8:	e010      	b.n	8000c1c <updateManualTime+0xa8>
			tempGreen	+= 1;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <updateManualTime+0xc8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <updateManualTime+0xc8>)
 8000c02:	6013      	str	r3, [r2, #0]
			tempRed		+= 1;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <updateManualTime+0xc4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <updateManualTime+0xc4>)
 8000c0c:	6013      	str	r3, [r2, #0]
			break;
 8000c0e:	e006      	b.n	8000c1e <updateManualTime+0xaa>
		}
	}
 8000c10:	bf00      	nop
 8000c12:	e004      	b.n	8000c1e <updateManualTime+0xaa>
			break;
 8000c14:	bf00      	nop
 8000c16:	e002      	b.n	8000c1e <updateManualTime+0xaa>
			break;
 8000c18:	bf00      	nop
 8000c1a:	e000      	b.n	8000c1e <updateManualTime+0xaa>
			break;
 8000c1c:	bf00      	nop
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000068 	.word	0x20000068
 8000c28:	20000040 	.word	0x20000040
 8000c2c:	200000ec 	.word	0x200000ec
 8000c30:	20000110 	.word	0x20000110
 8000c34:	2000003c 	.word	0x2000003c
 8000c38:	20000044 	.word	0x20000044
 8000c3c:	2000004c 	.word	0x2000004c
 8000c40:	20000048 	.word	0x20000048

08000c44 <saveManualTime>:

void saveManualTime(){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	if(isButtonPressed(&button3) && mode == MODE_MANUAL){
 8000c48:	482c      	ldr	r0, [pc, #176]	; (8000cfc <saveManualTime+0xb8>)
 8000c4a:	f7ff fb13 	bl	8000274 <isButtonPressed>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d051      	beq.n	8000cf8 <saveManualTime+0xb4>
 8000c54:	4b2a      	ldr	r3, [pc, #168]	; (8000d00 <saveManualTime+0xbc>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b66      	cmp	r3, #102	; 0x66
 8000c5a:	d14d      	bne.n	8000cf8 <saveManualTime+0xb4>
		switch(manual_status) {
 8000c5c:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <saveManualTime+0xc0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b18      	cmp	r3, #24
 8000c62:	d028      	beq.n	8000cb6 <saveManualTime+0x72>
 8000c64:	2b18      	cmp	r3, #24
 8000c66:	dc37      	bgt.n	8000cd8 <saveManualTime+0x94>
 8000c68:	2b16      	cmp	r3, #22
 8000c6a:	d002      	beq.n	8000c72 <saveManualTime+0x2e>
 8000c6c:	2b17      	cmp	r3, #23
 8000c6e:	d011      	beq.n	8000c94 <saveManualTime+0x50>
		case MAN_GREEN:
			timeGreen = tempGreen * 1000;
			timeRed   = tempRed   * 1000;
			break;
		default:
			break;
 8000c70:	e032      	b.n	8000cd8 <saveManualTime+0x94>
			timeRed   = tempRed   * 1000;
 8000c72:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <saveManualTime+0xc4>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c7a:	fb02 f303 	mul.w	r3, r2, r3
 8000c7e:	4a23      	ldr	r2, [pc, #140]	; (8000d0c <saveManualTime+0xc8>)
 8000c80:	6013      	str	r3, [r2, #0]
			timeGreen = tempGreen * 1000;
 8000c82:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <saveManualTime+0xcc>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c8a:	fb02 f303 	mul.w	r3, r2, r3
 8000c8e:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <saveManualTime+0xd0>)
 8000c90:	6013      	str	r3, [r2, #0]
			break;
 8000c92:	e022      	b.n	8000cda <saveManualTime+0x96>
			timeYel	  = tempYel   * 1000;
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <saveManualTime+0xd4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ca0:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <saveManualTime+0xd8>)
 8000ca2:	6013      	str	r3, [r2, #0]
			timeRed   = tempRed   * 1000;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <saveManualTime+0xc4>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cac:	fb02 f303 	mul.w	r3, r2, r3
 8000cb0:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <saveManualTime+0xc8>)
 8000cb2:	6013      	str	r3, [r2, #0]
			break;
 8000cb4:	e011      	b.n	8000cda <saveManualTime+0x96>
			timeGreen = tempGreen * 1000;
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <saveManualTime+0xcc>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cbe:	fb02 f303 	mul.w	r3, r2, r3
 8000cc2:	4a14      	ldr	r2, [pc, #80]	; (8000d14 <saveManualTime+0xd0>)
 8000cc4:	6013      	str	r3, [r2, #0]
			timeRed   = tempRed   * 1000;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <saveManualTime+0xc4>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cce:	fb02 f303 	mul.w	r3, r2, r3
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <saveManualTime+0xc8>)
 8000cd4:	6013      	str	r3, [r2, #0]
			break;
 8000cd6:	e000      	b.n	8000cda <saveManualTime+0x96>
			break;
 8000cd8:	bf00      	nop

		}
		isEditted = 0;
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <saveManualTime+0xdc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]

        backupRed   = tempRed;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <saveManualTime+0xc4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <saveManualTime+0xe0>)
 8000ce6:	6013      	str	r3, [r2, #0]
        backupYel   = tempYel;
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <saveManualTime+0xd4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <saveManualTime+0xe4>)
 8000cee:	6013      	str	r3, [r2, #0]
        backupGreen = tempGreen;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <saveManualTime+0xcc>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <saveManualTime+0xe8>)
 8000cf6:	6013      	str	r3, [r2, #0]
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000007c 	.word	0x2000007c
 8000d00:	20000040 	.word	0x20000040
 8000d04:	2000003c 	.word	0x2000003c
 8000d08:	20000044 	.word	0x20000044
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	2000004c 	.word	0x2000004c
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000048 	.word	0x20000048
 8000d1c:	20000004 	.word	0x20000004
 8000d20:	200000ec 	.word	0x200000ec
 8000d24:	20000050 	.word	0x20000050
 8000d28:	20000054 	.word	0x20000054
 8000d2c:	20000058 	.word	0x20000058

08000d30 <display7SEG>:
int led_idx = 0;

int mainTimeRemain = 0;
int subTimeRemain = 0;

void display7SEG (int num) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b09      	cmp	r3, #9
 8000d3c:	f200 8180 	bhi.w	8001040 <display7SEG+0x310>
 8000d40:	a201      	add	r2, pc, #4	; (adr r2, 8000d48 <display7SEG+0x18>)
 8000d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d46:	bf00      	nop
 8000d48:	08000d71 	.word	0x08000d71
 8000d4c:	08000db9 	.word	0x08000db9
 8000d50:	08000e01 	.word	0x08000e01
 8000d54:	08000e49 	.word	0x08000e49
 8000d58:	08000e91 	.word	0x08000e91
 8000d5c:	08000ed9 	.word	0x08000ed9
 8000d60:	08000f21 	.word	0x08000f21
 8000d64:	08000f69 	.word	0x08000f69
 8000d68:	08000fb1 	.word	0x08000fb1
 8000d6c:	08000ff9 	.word	0x08000ff9
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(LED_a_GPIO_Port, LED_a_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2101      	movs	r1, #1
 8000d74:	48b5      	ldr	r0, [pc, #724]	; (800104c <display7SEG+0x31c>)
 8000d76:	f001 f800 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_b_GPIO_Port, LED_b_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	48b3      	ldr	r0, [pc, #716]	; (800104c <display7SEG+0x31c>)
 8000d80:	f000 fffb 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_c_GPIO_Port, LED_c_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2104      	movs	r1, #4
 8000d88:	48b0      	ldr	r0, [pc, #704]	; (800104c <display7SEG+0x31c>)
 8000d8a:	f000 fff6 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_d_GPIO_Port, LED_d_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2108      	movs	r1, #8
 8000d92:	48ae      	ldr	r0, [pc, #696]	; (800104c <display7SEG+0x31c>)
 8000d94:	f000 fff1 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_e_GPIO_Port, LED_e_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2110      	movs	r1, #16
 8000d9c:	48ab      	ldr	r0, [pc, #684]	; (800104c <display7SEG+0x31c>)
 8000d9e:	f000 ffec 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_f_GPIO_Port, LED_f_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2120      	movs	r1, #32
 8000da6:	48a9      	ldr	r0, [pc, #676]	; (800104c <display7SEG+0x31c>)
 8000da8:	f000 ffe7 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_g_GPIO_Port, LED_g_Pin, GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2140      	movs	r1, #64	; 0x40
 8000db0:	48a6      	ldr	r0, [pc, #664]	; (800104c <display7SEG+0x31c>)
 8000db2:	f000 ffe2 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 8000db6:	e144      	b.n	8001042 <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin(LED_a_GPIO_Port, LED_a_Pin, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2101      	movs	r1, #1
 8000dbc:	48a3      	ldr	r0, [pc, #652]	; (800104c <display7SEG+0x31c>)
 8000dbe:	f000 ffdc 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_b_GPIO_Port, LED_b_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	48a1      	ldr	r0, [pc, #644]	; (800104c <display7SEG+0x31c>)
 8000dc8:	f000 ffd7 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_c_GPIO_Port, LED_c_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2104      	movs	r1, #4
 8000dd0:	489e      	ldr	r0, [pc, #632]	; (800104c <display7SEG+0x31c>)
 8000dd2:	f000 ffd2 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_d_GPIO_Port, LED_d_Pin, GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2108      	movs	r1, #8
 8000dda:	489c      	ldr	r0, [pc, #624]	; (800104c <display7SEG+0x31c>)
 8000ddc:	f000 ffcd 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_e_GPIO_Port, LED_e_Pin, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	2110      	movs	r1, #16
 8000de4:	4899      	ldr	r0, [pc, #612]	; (800104c <display7SEG+0x31c>)
 8000de6:	f000 ffc8 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_f_GPIO_Port, LED_f_Pin, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	2120      	movs	r1, #32
 8000dee:	4897      	ldr	r0, [pc, #604]	; (800104c <display7SEG+0x31c>)
 8000df0:	f000 ffc3 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_g_GPIO_Port, LED_g_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2140      	movs	r1, #64	; 0x40
 8000df8:	4894      	ldr	r0, [pc, #592]	; (800104c <display7SEG+0x31c>)
 8000dfa:	f000 ffbe 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 8000dfe:	e120      	b.n	8001042 <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin(LED_a_GPIO_Port, LED_a_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2101      	movs	r1, #1
 8000e04:	4891      	ldr	r0, [pc, #580]	; (800104c <display7SEG+0x31c>)
 8000e06:	f000 ffb8 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_b_GPIO_Port, LED_b_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	488f      	ldr	r0, [pc, #572]	; (800104c <display7SEG+0x31c>)
 8000e10:	f000 ffb3 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_c_GPIO_Port, LED_c_Pin, GPIO_PIN_SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2104      	movs	r1, #4
 8000e18:	488c      	ldr	r0, [pc, #560]	; (800104c <display7SEG+0x31c>)
 8000e1a:	f000 ffae 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_d_GPIO_Port, LED_d_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2108      	movs	r1, #8
 8000e22:	488a      	ldr	r0, [pc, #552]	; (800104c <display7SEG+0x31c>)
 8000e24:	f000 ffa9 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_e_GPIO_Port, LED_e_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	4887      	ldr	r0, [pc, #540]	; (800104c <display7SEG+0x31c>)
 8000e2e:	f000 ffa4 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_f_GPIO_Port, LED_f_Pin, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2120      	movs	r1, #32
 8000e36:	4885      	ldr	r0, [pc, #532]	; (800104c <display7SEG+0x31c>)
 8000e38:	f000 ff9f 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_g_GPIO_Port, LED_g_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2140      	movs	r1, #64	; 0x40
 8000e40:	4882      	ldr	r0, [pc, #520]	; (800104c <display7SEG+0x31c>)
 8000e42:	f000 ff9a 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 8000e46:	e0fc      	b.n	8001042 <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin(LED_a_GPIO_Port, LED_a_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	487f      	ldr	r0, [pc, #508]	; (800104c <display7SEG+0x31c>)
 8000e4e:	f000 ff94 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_b_GPIO_Port, LED_b_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2102      	movs	r1, #2
 8000e56:	487d      	ldr	r0, [pc, #500]	; (800104c <display7SEG+0x31c>)
 8000e58:	f000 ff8f 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_c_GPIO_Port, LED_c_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2104      	movs	r1, #4
 8000e60:	487a      	ldr	r0, [pc, #488]	; (800104c <display7SEG+0x31c>)
 8000e62:	f000 ff8a 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_d_GPIO_Port, LED_d_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2108      	movs	r1, #8
 8000e6a:	4878      	ldr	r0, [pc, #480]	; (800104c <display7SEG+0x31c>)
 8000e6c:	f000 ff85 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_e_GPIO_Port, LED_e_Pin, GPIO_PIN_SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	2110      	movs	r1, #16
 8000e74:	4875      	ldr	r0, [pc, #468]	; (800104c <display7SEG+0x31c>)
 8000e76:	f000 ff80 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_f_GPIO_Port, LED_f_Pin, GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	4873      	ldr	r0, [pc, #460]	; (800104c <display7SEG+0x31c>)
 8000e80:	f000 ff7b 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_g_GPIO_Port, LED_g_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	4870      	ldr	r0, [pc, #448]	; (800104c <display7SEG+0x31c>)
 8000e8a:	f000 ff76 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 8000e8e:	e0d8      	b.n	8001042 <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin(LED_a_GPIO_Port, LED_a_Pin, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2101      	movs	r1, #1
 8000e94:	486d      	ldr	r0, [pc, #436]	; (800104c <display7SEG+0x31c>)
 8000e96:	f000 ff70 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_b_GPIO_Port, LED_b_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	486b      	ldr	r0, [pc, #428]	; (800104c <display7SEG+0x31c>)
 8000ea0:	f000 ff6b 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_c_GPIO_Port, LED_c_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2104      	movs	r1, #4
 8000ea8:	4868      	ldr	r0, [pc, #416]	; (800104c <display7SEG+0x31c>)
 8000eaa:	f000 ff66 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_d_GPIO_Port, LED_d_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	4866      	ldr	r0, [pc, #408]	; (800104c <display7SEG+0x31c>)
 8000eb4:	f000 ff61 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_e_GPIO_Port, LED_e_Pin, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4863      	ldr	r0, [pc, #396]	; (800104c <display7SEG+0x31c>)
 8000ebe:	f000 ff5c 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_f_GPIO_Port, LED_f_Pin, GPIO_PIN_RESET);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	4861      	ldr	r0, [pc, #388]	; (800104c <display7SEG+0x31c>)
 8000ec8:	f000 ff57 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_g_GPIO_Port, LED_g_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2140      	movs	r1, #64	; 0x40
 8000ed0:	485e      	ldr	r0, [pc, #376]	; (800104c <display7SEG+0x31c>)
 8000ed2:	f000 ff52 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 8000ed6:	e0b4      	b.n	8001042 <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin(LED_a_GPIO_Port, LED_a_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2101      	movs	r1, #1
 8000edc:	485b      	ldr	r0, [pc, #364]	; (800104c <display7SEG+0x31c>)
 8000ede:	f000 ff4c 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_b_GPIO_Port, LED_b_Pin, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	4859      	ldr	r0, [pc, #356]	; (800104c <display7SEG+0x31c>)
 8000ee8:	f000 ff47 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_c_GPIO_Port, LED_c_Pin, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2104      	movs	r1, #4
 8000ef0:	4856      	ldr	r0, [pc, #344]	; (800104c <display7SEG+0x31c>)
 8000ef2:	f000 ff42 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_d_GPIO_Port, LED_d_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2108      	movs	r1, #8
 8000efa:	4854      	ldr	r0, [pc, #336]	; (800104c <display7SEG+0x31c>)
 8000efc:	f000 ff3d 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_e_GPIO_Port, LED_e_Pin, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2110      	movs	r1, #16
 8000f04:	4851      	ldr	r0, [pc, #324]	; (800104c <display7SEG+0x31c>)
 8000f06:	f000 ff38 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_f_GPIO_Port, LED_f_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2120      	movs	r1, #32
 8000f0e:	484f      	ldr	r0, [pc, #316]	; (800104c <display7SEG+0x31c>)
 8000f10:	f000 ff33 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_g_GPIO_Port, LED_g_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2140      	movs	r1, #64	; 0x40
 8000f18:	484c      	ldr	r0, [pc, #304]	; (800104c <display7SEG+0x31c>)
 8000f1a:	f000 ff2e 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 8000f1e:	e090      	b.n	8001042 <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin(LED_a_GPIO_Port, LED_a_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2101      	movs	r1, #1
 8000f24:	4849      	ldr	r0, [pc, #292]	; (800104c <display7SEG+0x31c>)
 8000f26:	f000 ff28 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_b_GPIO_Port, LED_b_Pin, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	4847      	ldr	r0, [pc, #284]	; (800104c <display7SEG+0x31c>)
 8000f30:	f000 ff23 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_c_GPIO_Port, LED_c_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2104      	movs	r1, #4
 8000f38:	4844      	ldr	r0, [pc, #272]	; (800104c <display7SEG+0x31c>)
 8000f3a:	f000 ff1e 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_d_GPIO_Port, LED_d_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2108      	movs	r1, #8
 8000f42:	4842      	ldr	r0, [pc, #264]	; (800104c <display7SEG+0x31c>)
 8000f44:	f000 ff19 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_e_GPIO_Port, LED_e_Pin, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	483f      	ldr	r0, [pc, #252]	; (800104c <display7SEG+0x31c>)
 8000f4e:	f000 ff14 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_f_GPIO_Port, LED_f_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2120      	movs	r1, #32
 8000f56:	483d      	ldr	r0, [pc, #244]	; (800104c <display7SEG+0x31c>)
 8000f58:	f000 ff0f 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_g_GPIO_Port, LED_g_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2140      	movs	r1, #64	; 0x40
 8000f60:	483a      	ldr	r0, [pc, #232]	; (800104c <display7SEG+0x31c>)
 8000f62:	f000 ff0a 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 8000f66:	e06c      	b.n	8001042 <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin(LED_a_GPIO_Port, LED_a_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	4837      	ldr	r0, [pc, #220]	; (800104c <display7SEG+0x31c>)
 8000f6e:	f000 ff04 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_b_GPIO_Port, LED_b_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2102      	movs	r1, #2
 8000f76:	4835      	ldr	r0, [pc, #212]	; (800104c <display7SEG+0x31c>)
 8000f78:	f000 feff 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_c_GPIO_Port, LED_c_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2104      	movs	r1, #4
 8000f80:	4832      	ldr	r0, [pc, #200]	; (800104c <display7SEG+0x31c>)
 8000f82:	f000 fefa 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_d_GPIO_Port, LED_d_Pin, GPIO_PIN_SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2108      	movs	r1, #8
 8000f8a:	4830      	ldr	r0, [pc, #192]	; (800104c <display7SEG+0x31c>)
 8000f8c:	f000 fef5 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_e_GPIO_Port, LED_e_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2110      	movs	r1, #16
 8000f94:	482d      	ldr	r0, [pc, #180]	; (800104c <display7SEG+0x31c>)
 8000f96:	f000 fef0 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_f_GPIO_Port, LED_f_Pin, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	482b      	ldr	r0, [pc, #172]	; (800104c <display7SEG+0x31c>)
 8000fa0:	f000 feeb 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_g_GPIO_Port, LED_g_Pin, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2140      	movs	r1, #64	; 0x40
 8000fa8:	4828      	ldr	r0, [pc, #160]	; (800104c <display7SEG+0x31c>)
 8000faa:	f000 fee6 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 8000fae:	e048      	b.n	8001042 <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin(LED_a_GPIO_Port, LED_a_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	4825      	ldr	r0, [pc, #148]	; (800104c <display7SEG+0x31c>)
 8000fb6:	f000 fee0 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_b_GPIO_Port, LED_b_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	4823      	ldr	r0, [pc, #140]	; (800104c <display7SEG+0x31c>)
 8000fc0:	f000 fedb 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_c_GPIO_Port, LED_c_Pin, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	4820      	ldr	r0, [pc, #128]	; (800104c <display7SEG+0x31c>)
 8000fca:	f000 fed6 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_d_GPIO_Port, LED_d_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	481e      	ldr	r0, [pc, #120]	; (800104c <display7SEG+0x31c>)
 8000fd4:	f000 fed1 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_e_GPIO_Port, LED_e_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2110      	movs	r1, #16
 8000fdc:	481b      	ldr	r0, [pc, #108]	; (800104c <display7SEG+0x31c>)
 8000fde:	f000 fecc 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_f_GPIO_Port, LED_f_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2120      	movs	r1, #32
 8000fe6:	4819      	ldr	r0, [pc, #100]	; (800104c <display7SEG+0x31c>)
 8000fe8:	f000 fec7 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_g_GPIO_Port, LED_g_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2140      	movs	r1, #64	; 0x40
 8000ff0:	4816      	ldr	r0, [pc, #88]	; (800104c <display7SEG+0x31c>)
 8000ff2:	f000 fec2 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 8000ff6:	e024      	b.n	8001042 <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin(LED_a_GPIO_Port, LED_a_Pin, GPIO_PIN_RESET);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4813      	ldr	r0, [pc, #76]	; (800104c <display7SEG+0x31c>)
 8000ffe:	f000 febc 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_b_GPIO_Port, LED_b_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2102      	movs	r1, #2
 8001006:	4811      	ldr	r0, [pc, #68]	; (800104c <display7SEG+0x31c>)
 8001008:	f000 feb7 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_c_GPIO_Port, LED_c_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	2104      	movs	r1, #4
 8001010:	480e      	ldr	r0, [pc, #56]	; (800104c <display7SEG+0x31c>)
 8001012:	f000 feb2 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_d_GPIO_Port, LED_d_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	2108      	movs	r1, #8
 800101a:	480c      	ldr	r0, [pc, #48]	; (800104c <display7SEG+0x31c>)
 800101c:	f000 fead 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_e_GPIO_Port, LED_e_Pin, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	2110      	movs	r1, #16
 8001024:	4809      	ldr	r0, [pc, #36]	; (800104c <display7SEG+0x31c>)
 8001026:	f000 fea8 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_f_GPIO_Port, LED_f_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2120      	movs	r1, #32
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <display7SEG+0x31c>)
 8001030:	f000 fea3 	bl	8001d7a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_g_GPIO_Port, LED_g_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2140      	movs	r1, #64	; 0x40
 8001038:	4804      	ldr	r0, [pc, #16]	; (800104c <display7SEG+0x31c>)
 800103a:	f000 fe9e 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 800103e:	e000      	b.n	8001042 <display7SEG+0x312>
	default:
		break;
 8001040:	bf00      	nop
	}
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40010c00 	.word	0x40010c00

08001050 <updateCountTime>:

void updateCountTime (int mainTime, int subTime) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	time_buffer[1] = mainTime / 10;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a2b      	ldr	r2, [pc, #172]	; (800110c <updateCountTime+0xbc>)
 800105e:	fb82 1203 	smull	r1, r2, r2, r3
 8001062:	1092      	asrs	r2, r2, #2
 8001064:	17db      	asrs	r3, r3, #31
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	4a29      	ldr	r2, [pc, #164]	; (8001110 <updateCountTime+0xc0>)
 800106a:	6053      	str	r3, [r2, #4]
	time_buffer[2] = mainTime % 10;
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <updateCountTime+0xbc>)
 8001070:	fb83 2301 	smull	r2, r3, r3, r1
 8001074:	109a      	asrs	r2, r3, #2
 8001076:	17cb      	asrs	r3, r1, #31
 8001078:	1ad2      	subs	r2, r2, r3
 800107a:	4613      	mov	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	1aca      	subs	r2, r1, r3
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <updateCountTime+0xc0>)
 8001086:	609a      	str	r2, [r3, #8]

	time_buffer[4] = subTime / 10;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	4a20      	ldr	r2, [pc, #128]	; (800110c <updateCountTime+0xbc>)
 800108c:	fb82 1203 	smull	r1, r2, r2, r3
 8001090:	1092      	asrs	r2, r2, #2
 8001092:	17db      	asrs	r3, r3, #31
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <updateCountTime+0xc0>)
 8001098:	6113      	str	r3, [r2, #16]
	time_buffer[5] = subTime % 10;
 800109a:	6839      	ldr	r1, [r7, #0]
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <updateCountTime+0xbc>)
 800109e:	fb83 2301 	smull	r2, r3, r3, r1
 80010a2:	109a      	asrs	r2, r3, #2
 80010a4:	17cb      	asrs	r3, r1, #31
 80010a6:	1ad2      	subs	r2, r2, r3
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	1aca      	subs	r2, r1, r3
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <updateCountTime+0xc0>)
 80010b4:	615a      	str	r2, [r3, #20]

	if(mode == MODE_AUTO) {
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <updateCountTime+0xc4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b65      	cmp	r3, #101	; 0x65
 80010bc:	d106      	bne.n	80010cc <updateCountTime+0x7c>
		time_buffer[0] = 1;
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <updateCountTime+0xc0>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
		time_buffer[3] = 1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <updateCountTime+0xc0>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	60da      	str	r2, [r3, #12]
		case MAN_YEL:   time_buffer[0] = 3; break;
		case MAN_GREEN: time_buffer[0] = 4; break;
		}
		time_buffer[3] = time_buffer[0];
	}
}
 80010ca:	e01a      	b.n	8001102 <updateCountTime+0xb2>
		switch(manual_status) {
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <updateCountTime+0xc8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b18      	cmp	r3, #24
 80010d2:	d00e      	beq.n	80010f2 <updateCountTime+0xa2>
 80010d4:	2b18      	cmp	r3, #24
 80010d6:	dc10      	bgt.n	80010fa <updateCountTime+0xaa>
 80010d8:	2b16      	cmp	r3, #22
 80010da:	d002      	beq.n	80010e2 <updateCountTime+0x92>
 80010dc:	2b17      	cmp	r3, #23
 80010de:	d004      	beq.n	80010ea <updateCountTime+0x9a>
 80010e0:	e00b      	b.n	80010fa <updateCountTime+0xaa>
		case MAN_RED:   time_buffer[0] = 2; break;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <updateCountTime+0xc0>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	e007      	b.n	80010fa <updateCountTime+0xaa>
		case MAN_YEL:   time_buffer[0] = 3; break;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <updateCountTime+0xc0>)
 80010ec:	2203      	movs	r2, #3
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e003      	b.n	80010fa <updateCountTime+0xaa>
		case MAN_GREEN: time_buffer[0] = 4; break;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <updateCountTime+0xc0>)
 80010f4:	2204      	movs	r2, #4
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	bf00      	nop
		time_buffer[3] = time_buffer[0];
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <updateCountTime+0xc0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <updateCountTime+0xc0>)
 8001100:	60d3      	str	r3, [r2, #12]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	66666667 	.word	0x66666667
 8001110:	200000f0 	.word	0x200000f0
 8001114:	20000040 	.word	0x20000040
 8001118:	2000003c 	.word	0x2000003c

0800111c <showTime>:
void showTime(int led_idx) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB,EN1_Pin| EN2_Pin | EN3_Pin | EN4_Pin | EN5_Pin | EN6_Pin, SET);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800112a:	4826      	ldr	r0, [pc, #152]	; (80011c4 <showTime+0xa8>)
 800112c:	f000 fe25 	bl	8001d7a <HAL_GPIO_WritePin>
	display7SEG(time_buffer[led_idx]);
 8001130:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <showTime+0xac>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fdf9 	bl	8000d30 <display7SEG>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b05      	cmp	r3, #5
 8001142:	d839      	bhi.n	80011b8 <showTime+0x9c>
 8001144:	a201      	add	r2, pc, #4	; (adr r2, 800114c <showTime+0x30>)
 8001146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114a:	bf00      	nop
 800114c:	08001165 	.word	0x08001165
 8001150:	08001173 	.word	0x08001173
 8001154:	08001181 	.word	0x08001181
 8001158:	0800118f 	.word	0x0800118f
 800115c:	0800119d 	.word	0x0800119d
 8001160:	080011ab 	.word	0x080011ab
	switch(led_idx) {
	case 0:
		HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin, RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116a:	4816      	ldr	r0, [pc, #88]	; (80011c4 <showTime+0xa8>)
 800116c:	f000 fe05 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 8001170:	e023      	b.n	80011ba <showTime+0x9e>

	case 1:
		HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001178:	4812      	ldr	r0, [pc, #72]	; (80011c4 <showTime+0xa8>)
 800117a:	f000 fdfe 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 800117e:	e01c      	b.n	80011ba <showTime+0x9e>

	case 2:
		HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001186:	480f      	ldr	r0, [pc, #60]	; (80011c4 <showTime+0xa8>)
 8001188:	f000 fdf7 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 800118c:	e015      	b.n	80011ba <showTime+0x9e>

	case 3:
		HAL_GPIO_WritePin(EN4_GPIO_Port,EN4_Pin,RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <showTime+0xa8>)
 8001196:	f000 fdf0 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 800119a:	e00e      	b.n	80011ba <showTime+0x9e>

	case 4:
		HAL_GPIO_WritePin(EN5_GPIO_Port,EN5_Pin, RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a2:	4808      	ldr	r0, [pc, #32]	; (80011c4 <showTime+0xa8>)
 80011a4:	f000 fde9 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 80011a8:	e007      	b.n	80011ba <showTime+0x9e>

	case 5:
		HAL_GPIO_WritePin(EN6_GPIO_Port,EN6_Pin, RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <showTime+0xa8>)
 80011b2:	f000 fde2 	bl	8001d7a <HAL_GPIO_WritePin>
		break;
 80011b6:	e000      	b.n	80011ba <showTime+0x9e>


	default:
		break;
 80011b8:	bf00      	nop
	}
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40010c00 	.word	0x40010c00
 80011c8:	200000f0 	.word	0x200000f0

080011cc <updateCountdown>:

void updateCountdown() {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	if(isTimerExpired(&timer3)) {
 80011d0:	4813      	ldr	r0, [pc, #76]	; (8001220 <updateCountdown+0x54>)
 80011d2:	f000 fa66 	bl	80016a2 <isTimerExpired>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d01e      	beq.n	800121a <updateCountdown+0x4e>
		setTimer(&timer3,1000);
 80011dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011e0:	480f      	ldr	r0, [pc, #60]	; (8001220 <updateCountdown+0x54>)
 80011e2:	f000 fa2f 	bl	8001644 <setTimer>
		if(mainTimeRemain > 0) mainTimeRemain -- ;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <updateCountdown+0x58>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	dd04      	ble.n	80011f8 <updateCountdown+0x2c>
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <updateCountdown+0x58>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <updateCountdown+0x58>)
 80011f6:	6013      	str	r3, [r2, #0]
		if(subTimeRemain > 0) subTimeRemain --;
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <updateCountdown+0x5c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	dd04      	ble.n	800120a <updateCountdown+0x3e>
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <updateCountdown+0x5c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3b01      	subs	r3, #1
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <updateCountdown+0x5c>)
 8001208:	6013      	str	r3, [r2, #0]
		updateCountTime(mainTimeRemain,subTimeRemain);
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <updateCountdown+0x58>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a06      	ldr	r2, [pc, #24]	; (8001228 <updateCountdown+0x5c>)
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff1b 	bl	8001050 <updateCountTime>
	}
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000140 	.word	0x20000140
 8001224:	20000060 	.word	0x20000060
 8001228:	20000064 	.word	0x20000064

0800122c <turnOffMainLeds>:
#include "main.h"
#include "global.h"
#include "setTrafficLed.h"
#include "sw_timer.h"

void turnOffMainLeds() {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YEL1_GPIO_Port, YEL1_Pin, GPIO_PIN_SET);
 8001230:	2201      	movs	r2, #1
 8001232:	2120      	movs	r1, #32
 8001234:	480f      	ldr	r0, [pc, #60]	; (8001274 <turnOffMainLeds+0x48>)
 8001236:	f000 fda0 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL3_GPIO_Port, YEL3_Pin, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001240:	480c      	ldr	r0, [pc, #48]	; (8001274 <turnOffMainLeds+0x48>)
 8001242:	f000 fd9a 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	2140      	movs	r1, #64	; 0x40
 800124a:	480a      	ldr	r0, [pc, #40]	; (8001274 <turnOffMainLeds+0x48>)
 800124c:	f000 fd95 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN3_GPIO_Port, GREEN3_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001256:	4807      	ldr	r0, [pc, #28]	; (8001274 <turnOffMainLeds+0x48>)
 8001258:	f000 fd8f 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	2110      	movs	r1, #16
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <turnOffMainLeds+0x48>)
 8001262:	f000 fd8a 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED3_GPIO_Port, RED3_Pin, GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	2180      	movs	r1, #128	; 0x80
 800126a:	4802      	ldr	r0, [pc, #8]	; (8001274 <turnOffMainLeds+0x48>)
 800126c:	f000 fd85 	bl	8001d7a <HAL_GPIO_WritePin>
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40010800 	.word	0x40010800

08001278 <turnOffSubLeds>:

void turnOffSubLeds() {
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YEL2_GPIO_Port, YEL2_Pin, GPIO_PIN_SET);
 800127c:	2201      	movs	r2, #1
 800127e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001282:	4811      	ldr	r0, [pc, #68]	; (80012c8 <turnOffSubLeds+0x50>)
 8001284:	f000 fd79 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL4_GPIO_Port, YEL4_Pin, GPIO_PIN_SET);
 8001288:	2201      	movs	r2, #1
 800128a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128e:	480e      	ldr	r0, [pc, #56]	; (80012c8 <turnOffSubLeds+0x50>)
 8001290:	f000 fd73 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800129a:	480b      	ldr	r0, [pc, #44]	; (80012c8 <turnOffSubLeds+0x50>)
 800129c:	f000 fd6d 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN4_GPIO_Port, GREEN4_Pin, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a6:	4808      	ldr	r0, [pc, #32]	; (80012c8 <turnOffSubLeds+0x50>)
 80012a8:	f000 fd67 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <turnOffSubLeds+0x50>)
 80012b4:	f000 fd61 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED4_GPIO_Port, RED4_Pin, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012be:	4802      	ldr	r0, [pc, #8]	; (80012c8 <turnOffSubLeds+0x50>)
 80012c0:	f000 fd5b 	bl	8001d7a <HAL_GPIO_WritePin>
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40010800 	.word	0x40010800

080012cc <blinkyLedMain>:
void blinkyLedMain(	GPIO_TypeDef * port1, uint16_t pin1,
					GPIO_TypeDef * port2, uint16_t pin2 ){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	461a      	mov	r2, r3
 80012d8:	460b      	mov	r3, r1
 80012da:	817b      	strh	r3, [r7, #10]
 80012dc:	4613      	mov	r3, r2
 80012de:	813b      	strh	r3, [r7, #8]
	if(isTimerExpired(&timerBlinky1)) {
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <blinkyLedMain+0x48>)
 80012e2:	f000 f9de 	bl	80016a2 <isTimerExpired>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00e      	beq.n	800130a <blinkyLedMain+0x3e>
		HAL_GPIO_TogglePin(port1,pin1);
 80012ec:	897b      	ldrh	r3, [r7, #10]
 80012ee:	4619      	mov	r1, r3
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f000 fd5a 	bl	8001daa <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(port2,pin2);
 80012f6:	893b      	ldrh	r3, [r7, #8]
 80012f8:	4619      	mov	r1, r3
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fd55 	bl	8001daa <HAL_GPIO_TogglePin>
		setTimer(&timerBlinky1, 500);
 8001300:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <blinkyLedMain+0x48>)
 8001306:	f000 f99d 	bl	8001644 <setTimer>
	}
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000118 	.word	0x20000118

08001318 <blinkyLedSub>:

void blinkyLedSub(	GPIO_TypeDef * port1, uint16_t pin1,
					GPIO_TypeDef * port2, uint16_t pin2 ){
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	461a      	mov	r2, r3
 8001324:	460b      	mov	r3, r1
 8001326:	817b      	strh	r3, [r7, #10]
 8001328:	4613      	mov	r3, r2
 800132a:	813b      	strh	r3, [r7, #8]
	if(isTimerExpired(&timerBlinky2)) {
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <blinkyLedSub+0x48>)
 800132e:	f000 f9b8 	bl	80016a2 <isTimerExpired>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00e      	beq.n	8001356 <blinkyLedSub+0x3e>
		HAL_GPIO_TogglePin(port1,pin1);
 8001338:	897b      	ldrh	r3, [r7, #10]
 800133a:	4619      	mov	r1, r3
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f000 fd34 	bl	8001daa <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(port2,pin2);
 8001342:	893b      	ldrh	r3, [r7, #8]
 8001344:	4619      	mov	r1, r3
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 fd2f 	bl	8001daa <HAL_GPIO_TogglePin>
		setTimer(&timerBlinky2, 500);
 800134c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <blinkyLedSub+0x48>)
 8001352:	f000 f977 	bl	8001644 <setTimer>
	}
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000130 	.word	0x20000130

08001364 <redOnMain>:

//=====================================================MAIN LED FUNCTION==============================================================
void redOnMain(void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	blinkyLedMain(RED_MAIN_1,RED_MAIN_3);
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <redOnMain+0x40>)
 800136c:	2110      	movs	r1, #16
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <redOnMain+0x40>)
 8001370:	f7ff ffac 	bl	80012cc <blinkyLedMain>


	HAL_GPIO_WritePin(YEL_MAIN_1, GPIO_PIN_SET);
 8001374:	2201      	movs	r2, #1
 8001376:	2120      	movs	r1, #32
 8001378:	480a      	ldr	r0, [pc, #40]	; (80013a4 <redOnMain+0x40>)
 800137a:	f000 fcfe 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_MAIN_3, GPIO_PIN_SET);
 800137e:	2201      	movs	r2, #1
 8001380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <redOnMain+0x40>)
 8001386:	f000 fcf8 	bl	8001d7a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GREEN_MAIN_1, GPIO_PIN_SET);
 800138a:	2201      	movs	r2, #1
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <redOnMain+0x40>)
 8001390:	f000 fcf3 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_MAIN_3, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800139a:	4802      	ldr	r0, [pc, #8]	; (80013a4 <redOnMain+0x40>)
 800139c:	f000 fced 	bl	8001d7a <HAL_GPIO_WritePin>

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40010800 	.word	0x40010800

080013a8 <yellowOnMain>:

void yellowOnMain(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	blinkyLedMain(YEL_MAIN_1,YEL_MAIN_3);
 80013ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b0:	4a0d      	ldr	r2, [pc, #52]	; (80013e8 <yellowOnMain+0x40>)
 80013b2:	2120      	movs	r1, #32
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <yellowOnMain+0x40>)
 80013b6:	f7ff ff89 	bl	80012cc <blinkyLedMain>

	HAL_GPIO_WritePin(GREEN_MAIN_1, GPIO_PIN_SET);
 80013ba:	2201      	movs	r2, #1
 80013bc:	2140      	movs	r1, #64	; 0x40
 80013be:	480a      	ldr	r0, [pc, #40]	; (80013e8 <yellowOnMain+0x40>)
 80013c0:	f000 fcdb 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_MAIN_3, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ca:	4807      	ldr	r0, [pc, #28]	; (80013e8 <yellowOnMain+0x40>)
 80013cc:	f000 fcd5 	bl	8001d7a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_MAIN_1, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2110      	movs	r1, #16
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <yellowOnMain+0x40>)
 80013d6:	f000 fcd0 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_MAIN_3, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	4802      	ldr	r0, [pc, #8]	; (80013e8 <yellowOnMain+0x40>)
 80013e0:	f000 fccb 	bl	8001d7a <HAL_GPIO_WritePin>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40010800 	.word	0x40010800

080013ec <greenOnMain>:

void greenOnMain(void) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	blinkyLedMain(GREEN_MAIN_1,GREEN_MAIN_3);
 80013f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f4:	4a0d      	ldr	r2, [pc, #52]	; (800142c <greenOnMain+0x40>)
 80013f6:	2140      	movs	r1, #64	; 0x40
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <greenOnMain+0x40>)
 80013fa:	f7ff ff67 	bl	80012cc <blinkyLedMain>

	HAL_GPIO_WritePin(RED_MAIN_1, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	2110      	movs	r1, #16
 8001402:	480a      	ldr	r0, [pc, #40]	; (800142c <greenOnMain+0x40>)
 8001404:	f000 fcb9 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_MAIN_3, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	2180      	movs	r1, #128	; 0x80
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <greenOnMain+0x40>)
 800140e:	f000 fcb4 	bl	8001d7a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(YEL_MAIN_1, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	2120      	movs	r1, #32
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <greenOnMain+0x40>)
 8001418:	f000 fcaf 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_MAIN_3, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001422:	4802      	ldr	r0, [pc, #8]	; (800142c <greenOnMain+0x40>)
 8001424:	f000 fca9 	bl	8001d7a <HAL_GPIO_WritePin>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40010800 	.word	0x40010800

08001430 <redOnSub>:

//=====================================================SUB LED FUNCTION===============================================================
void redOnSub(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0

	blinkyLedSub(RED_SUB_2, RED_SUB_4);
 8001434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001438:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <redOnSub+0x48>)
 800143a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800143e:	480e      	ldr	r0, [pc, #56]	; (8001478 <redOnSub+0x48>)
 8001440:	f7ff ff6a 	bl	8001318 <blinkyLedSub>

	HAL_GPIO_WritePin(YEL_SUB_2, GPIO_PIN_SET);
 8001444:	2201      	movs	r2, #1
 8001446:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800144a:	480b      	ldr	r0, [pc, #44]	; (8001478 <redOnSub+0x48>)
 800144c:	f000 fc95 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_SUB_4, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001456:	4808      	ldr	r0, [pc, #32]	; (8001478 <redOnSub+0x48>)
 8001458:	f000 fc8f 	bl	8001d7a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GREEN_SUB_2, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <redOnSub+0x48>)
 8001464:	f000 fc89 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_SUB_4, GPIO_PIN_SET);
 8001468:	2201      	movs	r2, #1
 800146a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800146e:	4802      	ldr	r0, [pc, #8]	; (8001478 <redOnSub+0x48>)
 8001470:	f000 fc83 	bl	8001d7a <HAL_GPIO_WritePin>
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40010800 	.word	0x40010800

0800147c <yellowOnSub>:

void yellowOnSub(void) {
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	blinkyLedSub(YEL_SUB_2, YEL_SUB_4);
 8001480:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001484:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <yellowOnSub+0x48>)
 8001486:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800148a:	480e      	ldr	r0, [pc, #56]	; (80014c4 <yellowOnSub+0x48>)
 800148c:	f7ff ff44 	bl	8001318 <blinkyLedSub>

	HAL_GPIO_WritePin(GREEN_SUB_2, GPIO_PIN_SET);
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001496:	480b      	ldr	r0, [pc, #44]	; (80014c4 <yellowOnSub+0x48>)
 8001498:	f000 fc6f 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_SUB_4, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a2:	4808      	ldr	r0, [pc, #32]	; (80014c4 <yellowOnSub+0x48>)
 80014a4:	f000 fc69 	bl	8001d7a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_SUB_2, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <yellowOnSub+0x48>)
 80014b0:	f000 fc63 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_SUB_4, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ba:	4802      	ldr	r0, [pc, #8]	; (80014c4 <yellowOnSub+0x48>)
 80014bc:	f000 fc5d 	bl	8001d7a <HAL_GPIO_WritePin>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40010800 	.word	0x40010800

080014c8 <greenOnSub>:

void greenOnSub(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	blinkyLedSub(GREEN_SUB_2, GREEN_SUB_4);
 80014cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014d0:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <greenOnSub+0x48>)
 80014d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d6:	480e      	ldr	r0, [pc, #56]	; (8001510 <greenOnSub+0x48>)
 80014d8:	f7ff ff1e 	bl	8001318 <blinkyLedSub>

	HAL_GPIO_WritePin(YEL_SUB_2, GPIO_PIN_SET);
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e2:	480b      	ldr	r0, [pc, #44]	; (8001510 <greenOnSub+0x48>)
 80014e4:	f000 fc49 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_SUB_4, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ee:	4808      	ldr	r0, [pc, #32]	; (8001510 <greenOnSub+0x48>)
 80014f0:	f000 fc43 	bl	8001d7a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_SUB_2, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <greenOnSub+0x48>)
 80014fc:	f000 fc3d 	bl	8001d7a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_SUB_4, GPIO_PIN_SET);
 8001500:	2201      	movs	r2, #1
 8001502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001506:	4802      	ldr	r0, [pc, #8]	; (8001510 <greenOnSub+0x48>)
 8001508:	f000 fc37 	bl	8001d7a <HAL_GPIO_WritePin>
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40010800 	.word	0x40010800

08001514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_MspInit+0x5c>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	4a14      	ldr	r2, [pc, #80]	; (8001570 <HAL_MspInit+0x5c>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6193      	str	r3, [r2, #24]
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_MspInit+0x5c>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_MspInit+0x5c>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_MspInit+0x5c>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	61d3      	str	r3, [r2, #28]
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_MspInit+0x5c>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_MspInit+0x60>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_MspInit+0x60>)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	40021000 	.word	0x40021000
 8001574:	40010000 	.word	0x40010000

08001578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001588:	d113      	bne.n	80015b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_TIM_Base_MspInit+0x44>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <HAL_TIM_Base_MspInit+0x44>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_TIM_Base_MspInit+0x44>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	201c      	movs	r0, #28
 80015a8:	f000 fa1f 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015ac:	201c      	movs	r0, #28
 80015ae:	f000 fa38 	bl	8001a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler+0x4>

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr

08001602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001606:	f000 f8fd 	bl	8001804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <TIM2_IRQHandler+0x10>)
 8001616:	f001 f859 	bl	80026cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200000a4 	.word	0x200000a4

08001624 <initTimer>:
SoftwareTimer timerTestLed;
SoftwareTimer timeNoReact;
SoftwareTimer timerBlinky1;
SoftwareTimer timerBlinky2;

void initTimer(SoftwareTimer * t) {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	t->counter = 0;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
	t->flag = 0;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	711a      	strb	r2, [r3, #4]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
	...

08001644 <setTimer>:

void setTimer(SoftwareTimer *t, uint32_t duration) {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	t->counter = duration / TICK;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <setTimer+0x28>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	601a      	str	r2, [r3, #0]
	t->flag = 0 ;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	711a      	strb	r2, [r3, #4]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	cccccccd 	.word	0xcccccccd

08001670 <timerRun>:

void timerRun(SoftwareTimer *t) {
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	if (t->counter > 0) {
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00b      	beq.n	8001698 <timerRun+0x28>
		t->counter -- ;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	1e5a      	subs	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	601a      	str	r2, [r3, #0]
		if(t->counter == 0) {
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d102      	bne.n	8001698 <timerRun+0x28>
			t->flag = 1;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	711a      	strb	r2, [r3, #4]
		}
	}
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <isTimerExpired>:

uint8_t isTimerExpired(SoftwareTimer *t) {
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
	if(t->flag == 1) {
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	791b      	ldrb	r3, [r3, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d104      	bne.n	80016bc <isTimerExpired+0x1a>
		t->flag = 0;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	711a      	strb	r2, [r3, #4]
		return 1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <isTimerExpired+0x1c>
	}
	return 0;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <initAllTimer>:
void initAllTimer() {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	initTimer(&timer1);
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <initAllTimer+0x38>)
 80016ce:	f7ff ffa9 	bl	8001624 <initTimer>
	initTimer(&timer2);
 80016d2:	480c      	ldr	r0, [pc, #48]	; (8001704 <initAllTimer+0x3c>)
 80016d4:	f7ff ffa6 	bl	8001624 <initTimer>
	initTimer(&timer3);
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <initAllTimer+0x40>)
 80016da:	f7ff ffa3 	bl	8001624 <initTimer>
	initTimer(&timer4);
 80016de:	480b      	ldr	r0, [pc, #44]	; (800170c <initAllTimer+0x44>)
 80016e0:	f7ff ffa0 	bl	8001624 <initTimer>
	initTimer(&timerTestLed);
 80016e4:	480a      	ldr	r0, [pc, #40]	; (8001710 <initAllTimer+0x48>)
 80016e6:	f7ff ff9d 	bl	8001624 <initTimer>
	initTimer(&timeNoReact);
 80016ea:	480a      	ldr	r0, [pc, #40]	; (8001714 <initAllTimer+0x4c>)
 80016ec:	f7ff ff9a 	bl	8001624 <initTimer>
	initTimer(&timerBlinky1);
 80016f0:	4809      	ldr	r0, [pc, #36]	; (8001718 <initAllTimer+0x50>)
 80016f2:	f7ff ff97 	bl	8001624 <initTimer>
	initTimer(&timerBlinky2);
 80016f6:	4809      	ldr	r0, [pc, #36]	; (800171c <initAllTimer+0x54>)
 80016f8:	f7ff ff94 	bl	8001624 <initTimer>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000128 	.word	0x20000128
 8001704:	20000108 	.word	0x20000108
 8001708:	20000140 	.word	0x20000140
 800170c:	20000120 	.word	0x20000120
 8001710:	20000138 	.word	0x20000138
 8001714:	20000110 	.word	0x20000110
 8001718:	20000118 	.word	0x20000118
 800171c:	20000130 	.word	0x20000130

08001720 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800172c:	f7ff fff8 	bl	8001720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001730:	480b      	ldr	r0, [pc, #44]	; (8001760 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001732:	490c      	ldr	r1, [pc, #48]	; (8001764 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001734:	4a0c      	ldr	r2, [pc, #48]	; (8001768 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a09      	ldr	r2, [pc, #36]	; (800176c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001748:	4c09      	ldr	r4, [pc, #36]	; (8001770 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001756:	f001 faf9 	bl	8002d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800175a:	f7fe ff89 	bl	8000670 <main>
  bx lr
 800175e:	4770      	bx	lr
  ldr r0, =_sdata
 8001760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001764:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001768:	08002de8 	.word	0x08002de8
  ldr r2, =_sbss
 800176c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001770:	2000014c 	.word	0x2000014c

08001774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001774:	e7fe      	b.n	8001774 <ADC1_2_IRQHandler>
	...

08001778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_Init+0x28>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <HAL_Init+0x28>)
 8001782:	f043 0310 	orr.w	r3, r3, #16
 8001786:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001788:	2003      	movs	r0, #3
 800178a:	f000 f923 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178e:	200f      	movs	r0, #15
 8001790:	f000 f808 	bl	80017a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001794:	f7ff febe 	bl	8001514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40022000 	.word	0x40022000

080017a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_InitTick+0x54>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_InitTick+0x58>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f93b 	bl	8001a3e <HAL_SYSTICK_Config>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00e      	b.n	80017f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b0f      	cmp	r3, #15
 80017d6:	d80a      	bhi.n	80017ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d8:	2200      	movs	r2, #0
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f000 f903 	bl	80019ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e4:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_InitTick+0x5c>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e000      	b.n	80017f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2000000c 	.word	0x2000000c
 80017fc:	20000014 	.word	0x20000014
 8001800:	20000010 	.word	0x20000010

08001804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_IncTick+0x1c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_IncTick+0x20>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4413      	add	r3, r2
 8001814:	4a03      	ldr	r2, [pc, #12]	; (8001824 <HAL_IncTick+0x20>)
 8001816:	6013      	str	r3, [r2, #0]
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	20000014 	.word	0x20000014
 8001824:	20000148 	.word	0x20000148

08001828 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b02      	ldr	r3, [pc, #8]	; (8001838 <HAL_GetTick+0x10>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	20000148 	.word	0x20000148

0800183c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186e:	4a04      	ldr	r2, [pc, #16]	; (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	60d3      	str	r3, [r2, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db0b      	blt.n	80018ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	4906      	ldr	r1, [pc, #24]	; (80018d4 <__NVIC_EnableIRQ+0x34>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	; (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	; (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f7ff ff90 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff2d 	bl	800183c <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019fc:	f7ff ff42 	bl	8001884 <__NVIC_GetPriorityGrouping>
 8001a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f7ff ff90 	bl	800192c <NVIC_EncodePriority>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff5f 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff35 	bl	80018a0 <__NVIC_EnableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffa2 	bl	8001990 <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b08b      	sub	sp, #44	; 0x2c
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6a:	e148      	b.n	8001cfe <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	f040 8137 	bne.w	8001cf8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4aa3      	ldr	r2, [pc, #652]	; (8001d1c <HAL_GPIO_Init+0x2c4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d05e      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001a94:	4aa1      	ldr	r2, [pc, #644]	; (8001d1c <HAL_GPIO_Init+0x2c4>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d875      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001a9a:	4aa1      	ldr	r2, [pc, #644]	; (8001d20 <HAL_GPIO_Init+0x2c8>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d058      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001aa0:	4a9f      	ldr	r2, [pc, #636]	; (8001d20 <HAL_GPIO_Init+0x2c8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d86f      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001aa6:	4a9f      	ldr	r2, [pc, #636]	; (8001d24 <HAL_GPIO_Init+0x2cc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d052      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001aac:	4a9d      	ldr	r2, [pc, #628]	; (8001d24 <HAL_GPIO_Init+0x2cc>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d869      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001ab2:	4a9d      	ldr	r2, [pc, #628]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d04c      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001ab8:	4a9b      	ldr	r2, [pc, #620]	; (8001d28 <HAL_GPIO_Init+0x2d0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d863      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001abe:	4a9b      	ldr	r2, [pc, #620]	; (8001d2c <HAL_GPIO_Init+0x2d4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d046      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
 8001ac4:	4a99      	ldr	r2, [pc, #612]	; (8001d2c <HAL_GPIO_Init+0x2d4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d85d      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001aca:	2b12      	cmp	r3, #18
 8001acc:	d82a      	bhi.n	8001b24 <HAL_GPIO_Init+0xcc>
 8001ace:	2b12      	cmp	r3, #18
 8001ad0:	d859      	bhi.n	8001b86 <HAL_GPIO_Init+0x12e>
 8001ad2:	a201      	add	r2, pc, #4	; (adr r2, 8001ad8 <HAL_GPIO_Init+0x80>)
 8001ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad8:	08001b53 	.word	0x08001b53
 8001adc:	08001b2d 	.word	0x08001b2d
 8001ae0:	08001b3f 	.word	0x08001b3f
 8001ae4:	08001b81 	.word	0x08001b81
 8001ae8:	08001b87 	.word	0x08001b87
 8001aec:	08001b87 	.word	0x08001b87
 8001af0:	08001b87 	.word	0x08001b87
 8001af4:	08001b87 	.word	0x08001b87
 8001af8:	08001b87 	.word	0x08001b87
 8001afc:	08001b87 	.word	0x08001b87
 8001b00:	08001b87 	.word	0x08001b87
 8001b04:	08001b87 	.word	0x08001b87
 8001b08:	08001b87 	.word	0x08001b87
 8001b0c:	08001b87 	.word	0x08001b87
 8001b10:	08001b87 	.word	0x08001b87
 8001b14:	08001b87 	.word	0x08001b87
 8001b18:	08001b87 	.word	0x08001b87
 8001b1c:	08001b35 	.word	0x08001b35
 8001b20:	08001b49 	.word	0x08001b49
 8001b24:	4a82      	ldr	r2, [pc, #520]	; (8001d30 <HAL_GPIO_Init+0x2d8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b2a:	e02c      	b.n	8001b86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	623b      	str	r3, [r7, #32]
          break;
 8001b32:	e029      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	623b      	str	r3, [r7, #32]
          break;
 8001b3c:	e024      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	3308      	adds	r3, #8
 8001b44:	623b      	str	r3, [r7, #32]
          break;
 8001b46:	e01f      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	330c      	adds	r3, #12
 8001b4e:	623b      	str	r3, [r7, #32]
          break;
 8001b50:	e01a      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	623b      	str	r3, [r7, #32]
          break;
 8001b5e:	e013      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d105      	bne.n	8001b74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b68:	2308      	movs	r3, #8
 8001b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	611a      	str	r2, [r3, #16]
          break;
 8001b72:	e009      	b.n	8001b88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b74:	2308      	movs	r3, #8
 8001b76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	615a      	str	r2, [r3, #20]
          break;
 8001b7e:	e003      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b80:	2300      	movs	r3, #0
 8001b82:	623b      	str	r3, [r7, #32]
          break;
 8001b84:	e000      	b.n	8001b88 <HAL_GPIO_Init+0x130>
          break;
 8001b86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2bff      	cmp	r3, #255	; 0xff
 8001b8c:	d801      	bhi.n	8001b92 <HAL_GPIO_Init+0x13a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	e001      	b.n	8001b96 <HAL_GPIO_Init+0x13e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3304      	adds	r3, #4
 8001b96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2bff      	cmp	r3, #255	; 0xff
 8001b9c:	d802      	bhi.n	8001ba4 <HAL_GPIO_Init+0x14c>
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	e002      	b.n	8001baa <HAL_GPIO_Init+0x152>
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	3b08      	subs	r3, #8
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	210f      	movs	r1, #15
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	401a      	ands	r2, r3
 8001bbc:	6a39      	ldr	r1, [r7, #32]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8090 	beq.w	8001cf8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd8:	4b56      	ldr	r3, [pc, #344]	; (8001d34 <HAL_GPIO_Init+0x2dc>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	4a55      	ldr	r2, [pc, #340]	; (8001d34 <HAL_GPIO_Init+0x2dc>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6193      	str	r3, [r2, #24]
 8001be4:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <HAL_GPIO_Init+0x2dc>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bf0:	4a51      	ldr	r2, [pc, #324]	; (8001d38 <HAL_GPIO_Init+0x2e0>)
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	220f      	movs	r2, #15
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	4013      	ands	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a49      	ldr	r2, [pc, #292]	; (8001d3c <HAL_GPIO_Init+0x2e4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_GPIO_Init+0x1e0>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a48      	ldr	r2, [pc, #288]	; (8001d40 <HAL_GPIO_Init+0x2e8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_Init+0x1dc>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a47      	ldr	r2, [pc, #284]	; (8001d44 <HAL_GPIO_Init+0x2ec>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_GPIO_Init+0x1d8>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e004      	b.n	8001c3a <HAL_GPIO_Init+0x1e2>
 8001c30:	2303      	movs	r3, #3
 8001c32:	e002      	b.n	8001c3a <HAL_GPIO_Init+0x1e2>
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <HAL_GPIO_Init+0x1e2>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c3c:	f002 0203 	and.w	r2, r2, #3
 8001c40:	0092      	lsls	r2, r2, #2
 8001c42:	4093      	lsls	r3, r2
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c4a:	493b      	ldr	r1, [pc, #236]	; (8001d38 <HAL_GPIO_Init+0x2e0>)
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	089b      	lsrs	r3, r3, #2
 8001c50:	3302      	adds	r3, #2
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c64:	4b38      	ldr	r3, [pc, #224]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	4937      	ldr	r1, [pc, #220]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]
 8001c70:	e006      	b.n	8001c80 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c72:	4b35      	ldr	r3, [pc, #212]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	4933      	ldr	r1, [pc, #204]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c8c:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	492d      	ldr	r1, [pc, #180]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60cb      	str	r3, [r1, #12]
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	4929      	ldr	r1, [pc, #164]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d006      	beq.n	8001cc2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cb4:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	4923      	ldr	r1, [pc, #140]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
 8001cc0:	e006      	b.n	8001cd0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cc2:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	491f      	ldr	r1, [pc, #124]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4919      	ldr	r1, [pc, #100]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	600b      	str	r3, [r1, #0]
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	4915      	ldr	r1, [pc, #84]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f47f aeaf 	bne.w	8001a6c <HAL_GPIO_Init+0x14>
  }
}
 8001d0e:	bf00      	nop
 8001d10:	bf00      	nop
 8001d12:	372c      	adds	r7, #44	; 0x2c
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	10320000 	.word	0x10320000
 8001d20:	10310000 	.word	0x10310000
 8001d24:	10220000 	.word	0x10220000
 8001d28:	10210000 	.word	0x10210000
 8001d2c:	10120000 	.word	0x10120000
 8001d30:	10110000 	.word	0x10110000
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	40010800 	.word	0x40010800
 8001d40:	40010c00 	.word	0x40010c00
 8001d44:	40011000 	.word	0x40011000
 8001d48:	40010400 	.word	0x40010400

08001d4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	887b      	ldrh	r3, [r7, #2]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e001      	b.n	8001d6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	807b      	strh	r3, [r7, #2]
 8001d86:	4613      	mov	r3, r2
 8001d88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d8a:	787b      	ldrb	r3, [r7, #1]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d90:	887a      	ldrh	r2, [r7, #2]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d96:	e003      	b.n	8001da0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d98:	887b      	ldrh	r3, [r7, #2]
 8001d9a:	041a      	lsls	r2, r3, #16
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	611a      	str	r2, [r3, #16]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b085      	sub	sp, #20
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dbc:	887a      	ldrh	r2, [r7, #2]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	041a      	lsls	r2, r3, #16
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	400b      	ands	r3, r1
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	611a      	str	r2, [r3, #16]
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e26c      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8087 	beq.w	8001f0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dfc:	4b92      	ldr	r3, [pc, #584]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d00c      	beq.n	8001e22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e08:	4b8f      	ldr	r3, [pc, #572]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d112      	bne.n	8001e3a <HAL_RCC_OscConfig+0x5e>
 8001e14:	4b8c      	ldr	r3, [pc, #560]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e20:	d10b      	bne.n	8001e3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e22:	4b89      	ldr	r3, [pc, #548]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d06c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x12c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d168      	bne.n	8001f08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e246      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x76>
 8001e44:	4b80      	ldr	r3, [pc, #512]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a7f      	ldr	r2, [pc, #508]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e02e      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd4>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x98>
 8001e5a:	4b7b      	ldr	r3, [pc, #492]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a7a      	ldr	r2, [pc, #488]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b78      	ldr	r3, [pc, #480]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a77      	ldr	r2, [pc, #476]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e01d      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd4>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0xbc>
 8001e7e:	4b72      	ldr	r3, [pc, #456]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a71      	ldr	r2, [pc, #452]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b6f      	ldr	r3, [pc, #444]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6e      	ldr	r2, [pc, #440]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd4>
 8001e98:	4b6b      	ldr	r3, [pc, #428]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6a      	ldr	r2, [pc, #424]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b68      	ldr	r3, [pc, #416]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a67      	ldr	r2, [pc, #412]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d013      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fcb6 	bl	8001828 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fcb2 	bl	8001828 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e1fa      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b5d      	ldr	r3, [pc, #372]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xe4>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fca2 	bl	8001828 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fc9e 	bl	8001828 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e1e6      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	4b53      	ldr	r3, [pc, #332]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x10c>
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d063      	beq.n	8001fde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f16:	4b4c      	ldr	r3, [pc, #304]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f22:	4b49      	ldr	r3, [pc, #292]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d11c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x18c>
 8001f2e:	4b46      	ldr	r3, [pc, #280]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d116      	bne.n	8001f68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	4b43      	ldr	r3, [pc, #268]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_RCC_OscConfig+0x176>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e1ba      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4939      	ldr	r1, [pc, #228]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	e03a      	b.n	8001fde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d020      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f70:	4b36      	ldr	r3, [pc, #216]	; (800204c <HAL_RCC_OscConfig+0x270>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7ff fc57 	bl	8001828 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7ff fc53 	bl	8001828 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e19b      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f90:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f9c:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4927      	ldr	r1, [pc, #156]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
 8001fb0:	e015      	b.n	8001fde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb2:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_RCC_OscConfig+0x270>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fc36 	bl	8001828 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc0:	f7ff fc32 	bl	8001828 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e17a      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d03a      	beq.n	8002060 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d019      	beq.n	8002026 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_RCC_OscConfig+0x274>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff8:	f7ff fc16 	bl	8001828 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002000:	f7ff fc12 	bl	8001828 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e15a      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_RCC_OscConfig+0x26c>)
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800201e:	2001      	movs	r0, #1
 8002020:	f000 fa9a 	bl	8002558 <RCC_Delay>
 8002024:	e01c      	b.n	8002060 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_RCC_OscConfig+0x274>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202c:	f7ff fbfc 	bl	8001828 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002032:	e00f      	b.n	8002054 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002034:	f7ff fbf8 	bl	8001828 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d908      	bls.n	8002054 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e140      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
 8002046:	bf00      	nop
 8002048:	40021000 	.word	0x40021000
 800204c:	42420000 	.word	0x42420000
 8002050:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002054:	4b9e      	ldr	r3, [pc, #632]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1e9      	bne.n	8002034 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 80a6 	beq.w	80021ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002072:	4b97      	ldr	r3, [pc, #604]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10d      	bne.n	800209a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4b94      	ldr	r3, [pc, #592]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	4a93      	ldr	r2, [pc, #588]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	61d3      	str	r3, [r2, #28]
 800208a:	4b91      	ldr	r3, [pc, #580]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b8e      	ldr	r3, [pc, #568]	; (80022d4 <HAL_RCC_OscConfig+0x4f8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d118      	bne.n	80020d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a6:	4b8b      	ldr	r3, [pc, #556]	; (80022d4 <HAL_RCC_OscConfig+0x4f8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a8a      	ldr	r2, [pc, #552]	; (80022d4 <HAL_RCC_OscConfig+0x4f8>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7ff fbb9 	bl	8001828 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7ff fbb5 	bl	8001828 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b64      	cmp	r3, #100	; 0x64
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e0fd      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	4b81      	ldr	r3, [pc, #516]	; (80022d4 <HAL_RCC_OscConfig+0x4f8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x312>
 80020e0:	4b7b      	ldr	r3, [pc, #492]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4a7a      	ldr	r2, [pc, #488]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6213      	str	r3, [r2, #32]
 80020ec:	e02d      	b.n	800214a <HAL_RCC_OscConfig+0x36e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x334>
 80020f6:	4b76      	ldr	r3, [pc, #472]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4a75      	ldr	r2, [pc, #468]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	6213      	str	r3, [r2, #32]
 8002102:	4b73      	ldr	r3, [pc, #460]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4a72      	ldr	r2, [pc, #456]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	6213      	str	r3, [r2, #32]
 800210e:	e01c      	b.n	800214a <HAL_RCC_OscConfig+0x36e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d10c      	bne.n	8002132 <HAL_RCC_OscConfig+0x356>
 8002118:	4b6d      	ldr	r3, [pc, #436]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a6c      	ldr	r2, [pc, #432]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	6213      	str	r3, [r2, #32]
 8002124:	4b6a      	ldr	r3, [pc, #424]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4a69      	ldr	r2, [pc, #420]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6213      	str	r3, [r2, #32]
 8002130:	e00b      	b.n	800214a <HAL_RCC_OscConfig+0x36e>
 8002132:	4b67      	ldr	r3, [pc, #412]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4a66      	ldr	r2, [pc, #408]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6213      	str	r3, [r2, #32]
 800213e:	4b64      	ldr	r3, [pc, #400]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4a63      	ldr	r2, [pc, #396]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d015      	beq.n	800217e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7ff fb69 	bl	8001828 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7ff fb65 	bl	8001828 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	; 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e0ab      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002170:	4b57      	ldr	r3, [pc, #348]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0ee      	beq.n	800215a <HAL_RCC_OscConfig+0x37e>
 800217c:	e014      	b.n	80021a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7ff fb53 	bl	8001828 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7ff fb4f 	bl	8001828 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e095      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219c:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ee      	bne.n	8002186 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d105      	bne.n	80021ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ae:	4b48      	ldr	r3, [pc, #288]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4a47      	ldr	r2, [pc, #284]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 80021b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 8081 	beq.w	80022c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c4:	4b42      	ldr	r3, [pc, #264]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d061      	beq.n	8002294 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d146      	bne.n	8002266 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4b3f      	ldr	r3, [pc, #252]	; (80022d8 <HAL_RCC_OscConfig+0x4fc>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7ff fb23 	bl	8001828 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e6:	f7ff fb1f 	bl	8001828 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e067      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f8:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f0      	bne.n	80021e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220c:	d108      	bne.n	8002220 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800220e:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	492d      	ldr	r1, [pc, #180]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002220:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a19      	ldr	r1, [r3, #32]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	430b      	orrs	r3, r1
 8002232:	4927      	ldr	r1, [pc, #156]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <HAL_RCC_OscConfig+0x4fc>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7ff faf3 	bl	8001828 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002246:	f7ff faef 	bl	8001828 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e037      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x46a>
 8002264:	e02f      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <HAL_RCC_OscConfig+0x4fc>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7ff fadc 	bl	8001828 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002274:	f7ff fad8 	bl	8001828 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e020      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x498>
 8002292:	e018      	b.n	80022c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e013      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCC_OscConfig+0x4f4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d001      	beq.n	80022c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40007000 	.word	0x40007000
 80022d8:	42420060 	.word	0x42420060

080022dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0d0      	b.n	8002492 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f0:	4b6a      	ldr	r3, [pc, #424]	; (800249c <HAL_RCC_ClockConfig+0x1c0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d910      	bls.n	8002320 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b67      	ldr	r3, [pc, #412]	; (800249c <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 0207 	bic.w	r2, r3, #7
 8002306:	4965      	ldr	r1, [pc, #404]	; (800249c <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b63      	ldr	r3, [pc, #396]	; (800249c <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0b8      	b.n	8002492 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d020      	beq.n	800236e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002338:	4b59      	ldr	r3, [pc, #356]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a58      	ldr	r2, [pc, #352]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002342:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002350:	4b53      	ldr	r3, [pc, #332]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4a52      	ldr	r2, [pc, #328]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800235a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800235c:	4b50      	ldr	r3, [pc, #320]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	494d      	ldr	r1, [pc, #308]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d040      	beq.n	80023fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d107      	bne.n	8002392 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d115      	bne.n	80023ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e07f      	b.n	8002492 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239a:	4b41      	ldr	r3, [pc, #260]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e073      	b.n	8002492 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023aa:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e06b      	b.n	8002492 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ba:	4b39      	ldr	r3, [pc, #228]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f023 0203 	bic.w	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4936      	ldr	r1, [pc, #216]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023cc:	f7ff fa2c 	bl	8001828 <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d2:	e00a      	b.n	80023ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d4:	f7ff fa28 	bl	8001828 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e053      	b.n	8002492 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 020c 	and.w	r2, r3, #12
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d1eb      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <HAL_RCC_ClockConfig+0x1c0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d210      	bcs.n	800242c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 0207 	bic.w	r2, r3, #7
 8002412:	4922      	ldr	r1, [pc, #136]	; (800249c <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b20      	ldr	r3, [pc, #128]	; (800249c <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e032      	b.n	8002492 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002438:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4916      	ldr	r1, [pc, #88]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	4313      	orrs	r3, r2
 8002448:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d009      	beq.n	800246a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002456:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	490e      	ldr	r1, [pc, #56]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800246a:	f000 f821 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 800246e:	4602      	mov	r2, r0
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	490a      	ldr	r1, [pc, #40]	; (80024a4 <HAL_RCC_ClockConfig+0x1c8>)
 800247c:	5ccb      	ldrb	r3, [r1, r3]
 800247e:	fa22 f303 	lsr.w	r3, r2, r3
 8002482:	4a09      	ldr	r2, [pc, #36]	; (80024a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <HAL_RCC_ClockConfig+0x1d0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff f98a 	bl	80017a4 <HAL_InitTick>

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40022000 	.word	0x40022000
 80024a0:	40021000 	.word	0x40021000
 80024a4:	08002dbc 	.word	0x08002dbc
 80024a8:	2000000c 	.word	0x2000000c
 80024ac:	20000010 	.word	0x20000010

080024b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ca:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_RCC_GetSysClockFreq+0x94>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d002      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x30>
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d003      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0x36>
 80024de:	e027      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_RCC_GetSysClockFreq+0x98>)
 80024e2:	613b      	str	r3, [r7, #16]
      break;
 80024e4:	e027      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	0c9b      	lsrs	r3, r3, #18
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	4a17      	ldr	r2, [pc, #92]	; (800254c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024f0:	5cd3      	ldrb	r3, [r2, r3]
 80024f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d010      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_RCC_GetSysClockFreq+0x94>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	0c5b      	lsrs	r3, r3, #17
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	4a11      	ldr	r2, [pc, #68]	; (8002550 <HAL_RCC_GetSysClockFreq+0xa0>)
 800250a:	5cd3      	ldrb	r3, [r2, r3]
 800250c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a0d      	ldr	r2, [pc, #52]	; (8002548 <HAL_RCC_GetSysClockFreq+0x98>)
 8002512:	fb02 f203 	mul.w	r2, r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	e004      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a0c      	ldr	r2, [pc, #48]	; (8002554 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	613b      	str	r3, [r7, #16]
      break;
 800252e:	e002      	b.n	8002536 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_RCC_GetSysClockFreq+0x98>)
 8002532:	613b      	str	r3, [r7, #16]
      break;
 8002534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002536:	693b      	ldr	r3, [r7, #16]
}
 8002538:	4618      	mov	r0, r3
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	007a1200 	.word	0x007a1200
 800254c:	08002dcc 	.word	0x08002dcc
 8002550:	08002ddc 	.word	0x08002ddc
 8002554:	003d0900 	.word	0x003d0900

08002558 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <RCC_Delay+0x34>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <RCC_Delay+0x38>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	0a5b      	lsrs	r3, r3, #9
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	fb02 f303 	mul.w	r3, r2, r3
 8002572:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002574:	bf00      	nop
  }
  while (Delay --);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1e5a      	subs	r2, r3, #1
 800257a:	60fa      	str	r2, [r7, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1f9      	bne.n	8002574 <RCC_Delay+0x1c>
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	2000000c 	.word	0x2000000c
 8002590:	10624dd3 	.word	0x10624dd3

08002594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e041      	b.n	800262a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fe ffdc 	bl	8001578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3304      	adds	r3, #4
 80025d0:	4619      	mov	r1, r3
 80025d2:	4610      	mov	r0, r2
 80025d4:	f000 fa56 	bl	8002a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d001      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e035      	b.n	80026b8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <HAL_TIM_Base_Start_IT+0x90>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d009      	beq.n	8002682 <HAL_TIM_Base_Start_IT+0x4e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002676:	d004      	beq.n	8002682 <HAL_TIM_Base_Start_IT+0x4e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <HAL_TIM_Base_Start_IT+0x94>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d111      	bne.n	80026a6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b06      	cmp	r3, #6
 8002692:	d010      	beq.n	80026b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a4:	e007      	b.n	80026b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0201 	orr.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40012c00 	.word	0x40012c00
 80026c8:	40000400 	.word	0x40000400

080026cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d020      	beq.n	8002730 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01b      	beq.n	8002730 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0202 	mvn.w	r2, #2
 8002700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f998 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 800271c:	e005      	b.n	800272a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f98b 	bl	8002a3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f99a 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d020      	beq.n	800277c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01b      	beq.n	800277c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0204 	mvn.w	r2, #4
 800274c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2202      	movs	r2, #2
 8002752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f972 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 8002768:	e005      	b.n	8002776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f965 	bl	8002a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f974 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d020      	beq.n	80027c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d01b      	beq.n	80027c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0208 	mvn.w	r2, #8
 8002798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2204      	movs	r2, #4
 800279e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f94c 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 80027b4:	e005      	b.n	80027c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f93f 	bl	8002a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f94e 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d020      	beq.n	8002814 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d01b      	beq.n	8002814 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0210 	mvn.w	r2, #16
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2208      	movs	r2, #8
 80027ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f926 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f919 	bl	8002a3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f928 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00c      	beq.n	8002838 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d007      	beq.n	8002838 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0201 	mvn.w	r2, #1
 8002830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe f896 	bl	8000964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00c      	beq.n	800285c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fa6f 	bl	8002d3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00c      	beq.n	8002880 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f8f8 	bl	8002a70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00c      	beq.n	80028a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f003 0320 	and.w	r3, r3, #32
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0220 	mvn.w	r2, #32
 800289c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fa42 	bl	8002d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_TIM_ConfigClockSource+0x1c>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e0b4      	b.n	8002a32 <HAL_TIM_ConfigClockSource+0x186>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002900:	d03e      	beq.n	8002980 <HAL_TIM_ConfigClockSource+0xd4>
 8002902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002906:	f200 8087 	bhi.w	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 800290a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290e:	f000 8086 	beq.w	8002a1e <HAL_TIM_ConfigClockSource+0x172>
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002916:	d87f      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b70      	cmp	r3, #112	; 0x70
 800291a:	d01a      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0xa6>
 800291c:	2b70      	cmp	r3, #112	; 0x70
 800291e:	d87b      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b60      	cmp	r3, #96	; 0x60
 8002922:	d050      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002924:	2b60      	cmp	r3, #96	; 0x60
 8002926:	d877      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 8002928:	2b50      	cmp	r3, #80	; 0x50
 800292a:	d03c      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0xfa>
 800292c:	2b50      	cmp	r3, #80	; 0x50
 800292e:	d873      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b40      	cmp	r3, #64	; 0x40
 8002932:	d058      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002934:	2b40      	cmp	r3, #64	; 0x40
 8002936:	d86f      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b30      	cmp	r3, #48	; 0x30
 800293a:	d064      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x15a>
 800293c:	2b30      	cmp	r3, #48	; 0x30
 800293e:	d86b      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b20      	cmp	r3, #32
 8002942:	d060      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x15a>
 8002944:	2b20      	cmp	r3, #32
 8002946:	d867      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
 8002948:	2b00      	cmp	r3, #0
 800294a:	d05c      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x15a>
 800294c:	2b10      	cmp	r3, #16
 800294e:	d05a      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x15a>
 8002950:	e062      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6899      	ldr	r1, [r3, #8]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f000 f96a 	bl	8002c3a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002974:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	609a      	str	r2, [r3, #8]
      break;
 800297e:	e04f      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f000 f953 	bl	8002c3a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029a2:	609a      	str	r2, [r3, #8]
      break;
 80029a4:	e03c      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6859      	ldr	r1, [r3, #4]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f000 f8ca 	bl	8002b4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2150      	movs	r1, #80	; 0x50
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f921 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 80029c4:	e02c      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	461a      	mov	r2, r3
 80029d4:	f000 f8e8 	bl	8002ba8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2160      	movs	r1, #96	; 0x60
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f911 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 80029e4:	e01c      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6859      	ldr	r1, [r3, #4]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f000 f8aa 	bl	8002b4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2140      	movs	r1, #64	; 0x40
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f901 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 8002a04:	e00c      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4610      	mov	r0, r2
 8002a12:	f000 f8f8 	bl	8002c06 <TIM_ITRx_SetConfig>
      break;
 8002a16:	e003      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	e000      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
	...

08002a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a2b      	ldr	r2, [pc, #172]	; (8002b44 <TIM_Base_SetConfig+0xc0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d007      	beq.n	8002aac <TIM_Base_SetConfig+0x28>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa2:	d003      	beq.n	8002aac <TIM_Base_SetConfig+0x28>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a28      	ldr	r2, [pc, #160]	; (8002b48 <TIM_Base_SetConfig+0xc4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d108      	bne.n	8002abe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a20      	ldr	r2, [pc, #128]	; (8002b44 <TIM_Base_SetConfig+0xc0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d007      	beq.n	8002ad6 <TIM_Base_SetConfig+0x52>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002acc:	d003      	beq.n	8002ad6 <TIM_Base_SetConfig+0x52>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a1d      	ldr	r2, [pc, #116]	; (8002b48 <TIM_Base_SetConfig+0xc4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d108      	bne.n	8002ae8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <TIM_Base_SetConfig+0xc0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d103      	bne.n	8002b1c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f023 0201 	bic.w	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	611a      	str	r2, [r3, #16]
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	40000400 	.word	0x40000400

08002b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	f023 0201 	bic.w	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f023 030a 	bic.w	r3, r3, #10
 8002b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	621a      	str	r2, [r3, #32]
}
 8002b9e:	bf00      	nop
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f023 0210 	bic.w	r2, r3, #16
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	031b      	lsls	r3, r3, #12
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002be4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	621a      	str	r2, [r3, #32]
}
 8002bfc:	bf00      	nop
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b085      	sub	sp, #20
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f043 0307 	orr.w	r3, r3, #7
 8002c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	609a      	str	r2, [r3, #8]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b087      	sub	sp, #28
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	021a      	lsls	r2, r3, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	609a      	str	r2, [r3, #8]
}
 8002c6e:	bf00      	nop
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e041      	b.n	8002d14 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d009      	beq.n	8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cdc:	d004      	beq.n	8002ce8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a10      	ldr	r2, [pc, #64]	; (8002d24 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d10c      	bne.n	8002d02 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40000400 	.word	0x40000400

08002d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <__libc_init_array>:
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	2600      	movs	r6, #0
 8002d50:	4d0c      	ldr	r5, [pc, #48]	; (8002d84 <__libc_init_array+0x38>)
 8002d52:	4c0d      	ldr	r4, [pc, #52]	; (8002d88 <__libc_init_array+0x3c>)
 8002d54:	1b64      	subs	r4, r4, r5
 8002d56:	10a4      	asrs	r4, r4, #2
 8002d58:	42a6      	cmp	r6, r4
 8002d5a:	d109      	bne.n	8002d70 <__libc_init_array+0x24>
 8002d5c:	f000 f822 	bl	8002da4 <_init>
 8002d60:	2600      	movs	r6, #0
 8002d62:	4d0a      	ldr	r5, [pc, #40]	; (8002d8c <__libc_init_array+0x40>)
 8002d64:	4c0a      	ldr	r4, [pc, #40]	; (8002d90 <__libc_init_array+0x44>)
 8002d66:	1b64      	subs	r4, r4, r5
 8002d68:	10a4      	asrs	r4, r4, #2
 8002d6a:	42a6      	cmp	r6, r4
 8002d6c:	d105      	bne.n	8002d7a <__libc_init_array+0x2e>
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
 8002d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d74:	4798      	blx	r3
 8002d76:	3601      	adds	r6, #1
 8002d78:	e7ee      	b.n	8002d58 <__libc_init_array+0xc>
 8002d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7e:	4798      	blx	r3
 8002d80:	3601      	adds	r6, #1
 8002d82:	e7f2      	b.n	8002d6a <__libc_init_array+0x1e>
 8002d84:	08002de0 	.word	0x08002de0
 8002d88:	08002de0 	.word	0x08002de0
 8002d8c:	08002de0 	.word	0x08002de0
 8002d90:	08002de4 	.word	0x08002de4

08002d94 <memset>:
 8002d94:	4603      	mov	r3, r0
 8002d96:	4402      	add	r2, r0
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d100      	bne.n	8002d9e <memset+0xa>
 8002d9c:	4770      	bx	lr
 8002d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002da2:	e7f9      	b.n	8002d98 <memset+0x4>

08002da4 <_init>:
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da6:	bf00      	nop
 8002da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002daa:	bc08      	pop	{r3}
 8002dac:	469e      	mov	lr, r3
 8002dae:	4770      	bx	lr

08002db0 <_fini>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	bf00      	nop
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr
